// ---- Created with 3Dmigoto v1.3.16 on Wed Sep 27 22:58:33 2023
Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[17];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[90];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD3,
  float2 v6 : TEXCOORD4,
  uint v7 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float o3 : SV_Target3,
  out float o4 : SV_Target4,
  out float o5 : SV_Target5)
{
  const float4 icb[] = { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = cmp(float2(0,0) != cb0[64].wx);
  r0.z = -0.00999999978 + v1.w;
  r0.z = cmp(r0.z < 0);
  r0.x = r0.x ? r0.z : 0;
  r0.x = cmp((int)v7.x == 0);
  r0.y = cmp(0 != cb0[63].w);
  r0.y = r0.y ? r0.x : 0;
  r0.yz = r0.yy ? v2.zw : v2.xy;
  r1.xyz = v7.xxx ? v3.xyz : -v3.xyz;
  r0.w = dot(v5.xyz, v5.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = v5.xyz * r0.www;
  r3.xy = cmp(float2(0,0.5) < cb0[83].ww);
  r1.w = cmp(0 != v6.y);
  r4.xyz = r1.www ? cb0[84].xyz : cb0[83].xyz;
  r3.xzw = r3.xxx ? r4.xyz : cb0[79].xyz;
  r3.xzw = v5.xyz * r0.www + r3.xzw;
  r0.w = dot(r3.xzw, r3.xzw);
  r0.w = rsqrt(r0.w);
  r3.xzw = r3.xzw * r0.www;
  r0.w = -1 + cb0[64].z;
  r4.xyzw = t0.SampleBias(s0_s, r0.yz, r0.w).xyzw;
  r5.xyz = cmp(cb0[26].xxx == float3(3,1,2));
  r1.w = cb0[38].z * r4.w;
  r6.xyz = cb0[39].xyz + -r4.xyz;
  r6.xyz = r1.www * r6.xyz + r4.xyz;
  r4.xyz = r5.xxx ? r6.xyz : r4.xyz;
  r1.w = -cb0[26].y + r4.w;
  r1.w = cmp(r1.w < 0);
  r1.w = r5.y ? r1.w : 0;
  if (r1.w != 0) discard;
  r6.xyzw = t1.SampleBias(s1_s, r0.yz, r0.w).xyzw;
  r0.yz = cmp(float2(0,0) != cb0[33].xy);
  r0.w = cmp(0 != cb0[48].x);
  r7.xyzw = cmp(r6.wwww >= float4(0.800000012,0.400000006,0.200000003,0.600000024));
  r0.w = r0.w ? r7.x : 0;
  r0.w = r0.w ? 2 : 1;
  r1.w = cmp(0 != cb0[51].w);
  r1.w = r7.y ? r1.w : 0;
  r5.xyw = cmp(r6.www < float3(0.600000024,0.400000006,0.800000012));
  r1.w = r1.w ? r5.x : 0;
  r0.w = r1.w ? 3 : r0.w;
  r1.w = cmp(0 != cb0[55].w);
  r1.w = r7.z ? r1.w : 0;
  r1.w = r5.y ? r1.w : 0;
  r0.w = r1.w ? 4 : r0.w;
  r1.w = cmp(0 != cb0[59].w);
  r1.w = r7.w ? r1.w : 0;
  r1.w = r5.w ? r1.w : 0;
  r0.w = r1.w ? 5 : r0.w;
  r7.xyzw = cmp(r0.wwww == float4(2,3,4,5));
  r5.xyw = r7.xxx ? cb0[48].yzw : cb0[23].xyz;
  r5.xyw = r7.yyy ? cb0[52].xyz : r5.xyw;
  r5.xyw = r7.zzz ? cb0[56].xyz : r5.xyw;
  r5.xyw = r7.www ? cb0[60].xyz : r5.xyw;
  r4.xyz = r5.xyw * r4.xyz;
  r1.w = cmp(0.00999999978 < r4.w);
  r1.w = r1.w ? r5.z : 0;
  r2.w = r1.w ? r4.w : 0;
  r4.w = -0.5 + r6.y;
  r0.y = r0.y ? r4.w : 0;
  r0.y = dot(r0.yy, abs(r0.yy));
  r0.y = 0.5 + r0.y;
  r4.w = v1.x * r0.y;
  r0.y = r0.z ? r4.w : r0.y;
  r0.z = cmp(r0.y < 0.0500000007);
  r4.w = cmp(0.949999988 < r0.y);
  r0.y = v3.w + r0.y;
  r0.y = 0.5 * r0.y;
  r0.y = r4.w ? 1 : r0.y;
  r0.y = r0.z ? 0 : r0.y;
  r0.z = cmp(r0.y < cb0[33].z);
  r0.y = cb0[33].z + -r0.y;
  r5.y = r0.y / cb0[33].z;
  r0.y = cmp(0 != cb0[36].y);
  r4.w = v1.y + v1.y;
  r4.w = max(0.00999999978, r4.w);
  r4.w = cb0[36].x * r4.w;
  r0.y = r0.y ? r4.w : cb0[36].x;
  r0.y = r5.y / r0.y;
  r0.y = min(1, r0.y);
  r5.z = 1 + -r0.y;
  r5.yz = r0.zz ? r5.yz : float2(0,1);
  r5.x = r0.z ? 1.000000 : 0;
  r0.y = cmp(9.99999975e-06 < v6.x);
  r0.x = (int)r0.x | (int)r0.y;
  r8.xy = r0.xx ? float2(1,0) : r5.xz;
  r0.x = cmp(0.5 < cb0[79].w);
  r0.y = cb0[78].w + cb0[78].w;
  r0.y = min(1, r0.y);
  r0.x = r0.x ? r0.y : 1;
  r0.y = cmp(0.899999976 < r6.x);
  if (r0.y != 0) {
    r0.yz = cb2[15].xy * r1.yy;
    r0.yz = cb2[14].xy * r1.xx + r0.yz;
    r9.yz = cb2[16].xy * r1.zz + r0.yz;
    r9.x = cb0[67].y * r9.y;
    r0.yz = r9.xz * float2(0.5,0.5) + float2(0.5,0.5);
    r0.y = t2.Sample(s3_s, r0.yz).x;
    r0.y = saturate(cb0[67].x * r0.y);
    r5.xzw = -cb0[69].xyz + cb0[68].xyz;
    r5.xzw = r0.yyy * r5.xzw + cb0[69].xyz;
    r5.xzw = r5.xzw * r4.xyz;
    r0.y = dot(r1.xyz, r3.xzw);
    r0.y = max(0.00100000005, r0.y);
    r0.y = log2(r0.y);
    r0.y = cb0[70].w * r0.y;
    r0.y = exp2(r0.y);
    r9.x = saturate(cb0[71].w * r0.y);
    r0.y = cmp(cb0[72].z < r9.x);
    if (r0.y != 0) {
      r10.xyz = cb0[73].xyz;
    } else {
      r0.y = cmp(0 != cb0[72].y);
      if (r0.y != 0) {
        r9.y = 0.5;
        r9.yzw = t3.Sample(s4_s, r9.xy).xyz;
        r10.xyz = r9.yzw * r6.zzz;
      } else {
        r9.xyz = cb0[71].xyz * r9.xxx;
        r10.xyz = r9.xyz * r6.zzz;
      }
    }
    r0.y = cmp(0 != v6.x);
    r9.xyz = cb0[72].xxx * r10.xyz;
    r9.xyz = r0.yyy ? r9.xyz : r10.xyz;
    r0.y = cmp(0 != cb0[36].z);
    r10.xyz = float3(-1,-1,-1) + cb0[70].xyz;
    r10.xyz = r5.yyy * r10.xyz + float3(1,1,1);
    r10.xyz = r0.yyy ? r10.xyz : cb0[70].xyz;
    r11.xyz = r10.xyz * r5.xzw;
    r0.y = cmp(0 != r8.x);
    r12.xyz = cb0[75].xxx * r5.xzw;
    r12.xyz = r0.yyy ? r11.xyz : r12.xyz;
    r0.y = cmp(r0.x < 1);
    r5.xyz = -r5.xzw * r10.xyz + r12.xyz;
    r5.xyz = r0.xxx * r5.xyz + r11.xyz;
    r5.xyz = r0.yyy ? r5.xyz : r12.xyz;
    r9.xyz = cb0[75].xxx * r9.xyz;
  } else {
    r0.y = -1 + r0.w;
    r0.z = r0.y * 0.100000001 + 0.0500000007;
    r4.w = cmp(0 != cb0[34].w);
    if (r4.w != 0) {
      r5.w = r0.y * 0.100000001 + 0.550000012;
      r8.z = 1 + -r0.z;
      r8.w = 1 + -r5.w;
      r10.xyz = t4.Sample(s2_s, r8.yz).xyz;
      r12.xyz = t4.Sample(s2_s, r8.yw).xyz;
      r10.xyz = -r12.xyz + r10.xyz;
      r10.xyz = cb0[76].zzz * r10.xyz + r12.xyz;
      r12.xz = float2(0,0);
      r12.yw = r8.zw;
      r13.xyz = t4.Sample(s2_s, r12.xy).xyz;
      r12.xyz = t4.Sample(s2_s, r12.zw).xyz;
      r13.xyz = r13.xyz + -r12.xyz;
      r12.xyz = cb0[76].zzz * r13.xyz + r12.xyz;
    } else {
      r13.x = 1 + -r0.z;
      r13.y = r8.y;
      r10.xyz = t4.Sample(s2_s, r13.yx).xyz;
      r13.z = 0;
      r12.xyz = t4.Sample(s2_s, r13.zx).xyz;
    }
    r5.w = cmp(r0.x < 1);
    if (r5.w != 0) {
      if (r4.w != 0) {
        r0.y = r0.y * 0.100000001 + 0.550000012;
        r13.yw = float2(1,1) + -r0.zy;
        r13.xz = float2(0,0);
        r8.yzw = t4.Sample(s2_s, r13.xy).xyz;
        r13.xyz = t4.Sample(s2_s, r13.zw).xyz;
        r8.yzw = -r13.xyz + r8.yzw;
        r8.yzw = cb0[76].zzz * r8.yzw + r13.xyz;
      } else {
        r13.y = 1 + -r0.z;
        r13.x = 0;
        r8.yzw = t4.Sample(s2_s, r13.xy).xyz;
      }
    } else {
      r8.yzw = float3(0,0,0);
    }
    r11.xyz = r12.xyz * r4.xyz;
    r0.y = cmp(0 != r8.x);
    r10.xyz = r10.xyz * r4.xyz;
    r12.xyz = cb0[75].xxx * r4.xyz;
    r10.xyz = r0.yyy ? r10.xyz : r12.xyz;
    r12.xyz = r8.yzw * r4.xyz;
    r8.xyz = -r4.xyz * r8.yzw + r10.xyz;
    r8.xyz = r0.xxx * r8.xyz + r12.xyz;
    r5.xyz = r5.www ? r8.xyz : r10.xyz;
    r0.y = cmp(r0.w == 1.000000);
    r0.z = r7.z ? cb0[58].w : cb0[62].w;
    r4.w = r7.z ? cb0[59].x : cb0[63].x;
    r0.z = r7.y ? cb0[54].w : r0.z;
    r4.w = r7.y ? cb0[55].x : r4.w;
    r8.x = r7.x ? cb0[50].w : r0.z;
    r8.y = r7.x ? cb0[51].x : r4.w;
    r0.yz = r0.yy ? cb0[38].xy : r8.xy;
    r3.x = dot(r1.xyz, r3.xzw);
    r3.x = max(0.00100000005, r3.x);
    r3.x = log2(r3.x);
    r0.y = r3.x * r0.y;
    r0.y = exp2(r0.y);
    r3.x = 1 + -r6.z;
    r0.y = cmp(r3.x < r0.y);
    r3.xzw = cb0[37].yzw * r0.zzz;
    r3.xzw = r3.xzw * r6.xxx;
    r3.xzw = r0.yyy ? r3.xzw : 0;
    r3.xzw = cb0[75].xxx * r3.xzw;
    r9.xyz = r0.yyy ? r3.xzw : 0;
  }
  r3.xzw = cb0[43].xyz * r4.xyz;
  r3.xzw = cb0[42].zzz * r3.xzw;
  r0.y = cmp(r0.w == 1.000000);
  r4.xyz = cb0[42].www * r3.xzw;
  r6.xyz = cb0[49].xxx * r3.xzw;
  r8.xyz = cb0[52].www * r3.xzw;
  r10.xyz = cb0[56].www * r3.xzw;
  r12.xyz = cb0[60].www * r3.xzw;
  r3.xzw = r7.www ? r12.xyz : r3.xzw;
  r3.xzw = r7.zzz ? r10.xyz : r3.xzw;
  r3.xzw = r7.yyy ? r8.xyz : r3.xzw;
  r3.xzw = r7.xxx ? r6.xyz : r3.xzw;
  r0.yzw = r0.yyy ? r4.xyz : r3.xzw;
  r3.x = cmp(r0.x < 1);
  r4.xyz = r9.xyz * r0.xxx;
  r3.xzw = r3.xxx ? r4.xyz : r9.xyz;
  r3.xzw = r5.xyz + r3.xzw;
  r0.xyz = -r3.xzw + r0.yzw;
  r0.xyz = r2.www * r0.xyz + r3.xzw;
  r0.xyz = r1.www ? r0.xyz : r3.xzw;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r3.xzw = r1.xyz * r0.www;
  r0.w = saturate(dot(r2.xyz, r3.xzw));
  r0.w = 1 + -r0.w;
  r0.w = max(9.99999975e-05, r0.w);
  r0.w = log2(r0.w);
  r0.w = cb0[89].x * r0.w;
  r0.w = exp2(r0.w);
  r2.xyz = max(cb0[88].xyz, cb0[87].xyz);
  r2.xyz = r2.xyz * r0.www;
  r0.xyz = r2.xyz * cb0[89].yyy + r0.xyz;
  r1.w = 1 + -r2.w;
  r1.w = cb0[89].z * r1.w + r2.w;
  r2.xyz = r2.xyz * cb0[89].yyy + r11.xyz;
  r2.w = max(r0.y, r0.z);
  r4.w = max(r2.w, r0.x);
  r2.w = cmp(1 < r4.w);
  r4.xyz = r0.xyz / r4.www;
  r0.w = 1;
  r0.xyzw = r2.wwww ? r4.xyzw : r0.xyzw;
  r3.xzw = r2.xyz + -r0.xyz;
  r3.xzw = cb0[85].xxx * r3.xzw + r0.xyz;
  r2.xyz = r3.yyy ? r3.xzw : r2.xyz;
  r0.w = saturate(0.0500000007 * r0.w);
  o1.w = sqrt(r0.w);
  o0.xyz = r1.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  r0.w = cmp(0 != cb0[22].x);
  r1.x = 0.00392156886 * cb0[22].y;
  o2.z = r0.w ? r1.x : r2.z;
  o0.w = r7.x ? 0.333000 : 0;
  o1.xyz = r0.xyz;
  o2.xy = r2.xy;
  o2.w = r1.w;
  o3.x = 0.0156862754;
  o4.x = r1.w;
  o5.x = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Wed Sep 27 22:58:33 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// COLOR                    0   xyzw        1     NONE   float   xy w
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
// TEXCOORD                 2   xyzw        4     NONE   float   xy w
// TEXCOORD                 3   xyz         5     NONE   float   xyz
// TEXCOORD                 4   xy          6     NONE   float   xy
// SV_IsFrontFace           0   x           7    FFACE    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   x           3   TARGET   float   x
// SV_Target                4   x           4   TARGET   float   x
// SV_Target                5   x           5   TARGET   float   x
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer CB0[90], immediateIndexed
dcl_constantbuffer CB1[8], immediateIndexed
dcl_constantbuffer CB2[17], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyw
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xy
dcl_input_ps_sgv constant v7.x, is_front_face
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.x
dcl_output o4.x
dcl_output o5.x
dcl_temps 14
ne r0.xy, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[64].wxww
add r0.z, v1.w, l(-0.010000)
lt r0.z, r0.z, l(0.000000)
and r0.x, r0.x, r0.z
discard_nz r0.x
if_nz r0.y
  lt r0.x, cb0[64].y, l(0.950000)
  if_nz r0.x
    div r0.xy, v4.yxyy, v4.wwww
    mul r0.xy, r0.xyxx, cb1[7].yxyy
    mul r0.xy, r0.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000)
    ge r0.zw, r0.xxxy, -r0.xxxy
    frc r0.xy, |r0.xyxx|
    movc r0.xy, r0.zwzz, r0.xyxx, -r0.xyxx
    mul r0.xy, r0.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000)
    ftou r0.xy, r0.xyxx
    dp4 r1.x, cb0[8].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.y, cb0[9].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.z, cb0[10].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.w, cb0[11].xyzw, icb[r0.y + 0].xyzw
    dp4 r0.x, r1.xyzw, icb[r0.x + 0].xyzw
    mad r0.x, cb0[64].y, l(17.000000), -r0.x
    add r0.x, r0.x, l(-0.010000)
    lt r0.x, r0.x, l(0.000000)
    discard_nz r0.x
  endif
endif
ieq r0.x, v7.x, l(0)
ne r0.y, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[63].w
and r0.y, r0.y, r0.x
movc r0.yz, r0.yyyy, v2.zzwz, v2.xxyx
movc r1.xyz, v7.xxxx, v3.xyzx, -v3.xyzx
dp3 r0.w, v5.xyzx, v5.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, v5.xyzx
lt r3.xy, l(0.000000, 0.500000, 0.000000, 0.000000), cb0[83].wwww
ne r1.w, l(0.000000, 0.000000, 0.000000, 0.000000), v6.y
movc r4.xyz, r1.wwww, cb0[84].xyzx, cb0[83].xyzx
movc r3.xzw, r3.xxxx, r4.xxyz, cb0[79].xxyz
mad r3.xzw, v5.xxyz, r0.wwww, r3.xxzw
dp3 r0.w, r3.xzwx, r3.xzwx
rsq r0.w, r0.w
mul r3.xzw, r0.wwww, r3.xxzw
add r0.w, cb0[64].z, l(-1.000000)
sample_b_indexable(texture2d)(float,float,float,float) r4.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
eq r5.xyz, cb0[26].xxxx, l(3.000000, 1.000000, 2.000000, 0.000000)
mul r1.w, r4.w, cb0[38].z
add r6.xyz, -r4.xyzx, cb0[39].xyzx
mad r6.xyz, r1.wwww, r6.xyzx, r4.xyzx
movc r4.xyz, r5.xxxx, r6.xyzx, r4.xyzx
add r1.w, r4.w, -cb0[26].y
lt r1.w, r1.w, l(0.000000)
and r1.w, r5.y, r1.w
discard_nz r1.w
sample_b_indexable(texture2d)(float,float,float,float) r6.xyzw, r0.yzyy, t1.xyzw, s1, r0.w
ne r0.yz, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[33].xxyx
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[48].x
ge r7.xyzw, r6.wwww, l(0.800000, 0.400000, 0.200000, 0.600000)
and r0.w, r0.w, r7.x
movc r0.w, r0.w, l(2.000000), l(1.000000)
ne r1.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[51].w
and r1.w, r7.y, r1.w
lt r5.xyw, r6.wwww, l(0.600000, 0.400000, 0.000000, 0.800000)
and r1.w, r1.w, r5.x
movc r0.w, r1.w, l(3.000000), r0.w
ne r1.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[55].w
and r1.w, r7.z, r1.w
and r1.w, r5.y, r1.w
movc r0.w, r1.w, l(4.000000), r0.w
ne r1.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[59].w
and r1.w, r7.w, r1.w
and r1.w, r5.w, r1.w
movc r0.w, r1.w, l(5.000000), r0.w
eq r7.xyzw, r0.wwww, l(2.000000, 3.000000, 4.000000, 5.000000)
movc r5.xyw, r7.xxxx, cb0[48].yzyw, cb0[23].xyxz
movc r5.xyw, r7.yyyy, cb0[52].xyxz, r5.xyxw
movc r5.xyw, r7.zzzz, cb0[56].xyxz, r5.xyxw
movc r5.xyw, r7.wwww, cb0[60].xyxz, r5.xyxw
mul r4.xyz, r4.xyzx, r5.xywx
lt r1.w, l(0.010000), r4.w
and r1.w, r1.w, r5.z
and r2.w, r4.w, r1.w
add r4.w, r6.y, l(-0.500000)
and r0.y, r0.y, r4.w
dp2 r0.y, r0.yyyy, |r0.yyyy|
add r0.y, r0.y, l(0.500000)
mul r4.w, r0.y, v1.x
movc r0.y, r0.z, r4.w, r0.y
lt r0.z, r0.y, l(0.050000)
lt r4.w, l(0.950000), r0.y
add r0.y, r0.y, v3.w
mul r0.y, r0.y, l(0.500000)
movc r0.y, r4.w, l(1.000000), r0.y
movc r0.y, r0.z, l(0), r0.y
lt r0.z, r0.y, cb0[33].z
add r0.y, -r0.y, cb0[33].z
div r5.y, r0.y, cb0[33].z
ne r0.y, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[36].y
add r4.w, v1.y, v1.y
max r4.w, r4.w, l(0.010000)
mul r4.w, r4.w, cb0[36].x
movc r0.y, r0.y, r4.w, cb0[36].x
div r0.y, r5.y, r0.y
min r0.y, r0.y, l(1.000000)
add r5.z, -r0.y, l(1.000000)
movc r5.yz, r0.zzzz, r5.yyzy, l(0,0,1.000000,0)
and r5.x, r0.z, l(0x3f800000)
lt r0.y, l(0.000010), v6.x
or r0.x, r0.x, r0.y
movc r8.xy, r0.xxxx, l(1.000000,0,0,0), r5.xzxx
lt r0.x, l(0.500000), cb0[79].w
add r0.y, cb0[78].w, cb0[78].w
min r0.y, r0.y, l(1.000000)
movc r0.x, r0.x, r0.y, l(1.000000)
lt r0.y, l(0.900000), r6.x
if_nz r0.y
  mul r0.yz, r1.yyyy, cb2[15].xxyx
  mad r0.yz, cb2[14].xxyx, r1.xxxx, r0.yyzy
  mad r9.yz, cb2[16].xxyx, r1.zzzz, r0.yyzy
  mul r9.x, r9.y, cb0[67].y
  mad r0.yz, r9.xxzx, l(0.000000, 0.500000, 0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
  sample_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t2.yxzw, s3
  mul_sat r0.y, r0.y, cb0[67].x
  add r5.xzw, cb0[68].xxyz, -cb0[69].xxyz
  mad r5.xzw, r0.yyyy, r5.xxzw, cb0[69].xxyz
  mul r5.xzw, r4.xxyz, r5.xxzw
  dp3 r0.y, r1.xyzx, r3.xzwx
  max r0.y, r0.y, l(0.001000)
  log r0.y, r0.y
  mul r0.y, r0.y, cb0[70].w
  exp r0.y, r0.y
  mul_sat r9.x, r0.y, cb0[71].w
  lt r0.y, cb0[72].z, r9.x
  if_nz r0.y
    mov r10.xyz, cb0[73].xyzx
  else
    ne r0.y, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[72].y
    if_nz r0.y
      mov r9.y, l(0.500000)
      sample_indexable(texture2d)(float,float,float,float) r9.yzw, r9.xyxx, t3.wxyz, s4
      mul r10.xyz, r6.zzzz, r9.yzwy
    else
      mul r9.xyz, r9.xxxx, cb0[71].xyzx
      mul r10.xyz, r6.zzzz, r9.xyzx
    endif
  endif
  ne r0.y, l(0.000000, 0.000000, 0.000000, 0.000000), v6.x
  mul r9.xyz, r10.xyzx, cb0[72].xxxx
  movc r9.xyz, r0.yyyy, r9.xyzx, r10.xyzx
  ne r0.y, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[36].z
  add r10.xyz, cb0[70].xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
  mad r10.xyz, r5.yyyy, r10.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  movc r10.xyz, r0.yyyy, r10.xyzx, cb0[70].xyzx
  mul r11.xyz, r5.xzwx, r10.xyzx
  ne r0.y, l(0.000000, 0.000000, 0.000000, 0.000000), r8.x
  mul r12.xyz, r5.xzwx, cb0[75].xxxx
  movc r12.xyz, r0.yyyy, r11.xyzx, r12.xyzx
  lt r0.y, r0.x, l(1.000000)
  mad r5.xyz, -r5.xzwx, r10.xyzx, r12.xyzx
  mad r5.xyz, r0.xxxx, r5.xyzx, r11.xyzx
  movc r5.xyz, r0.yyyy, r5.xyzx, r12.xyzx
  mul r9.xyz, r9.xyzx, cb0[75].xxxx
else
  add r0.y, r0.w, l(-1.000000)
  mad r0.z, r0.y, l(0.100000), l(0.050000)
  ne r4.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[34].w
  if_nz r4.w
    mad r5.w, r0.y, l(0.100000), l(0.550000)
    add r8.z, -r0.z, l(1.000000)
    add r8.w, -r5.w, l(1.000000)
    sample_indexable(texture2d)(float,float,float,float) r10.xyz, r8.yzyy, t4.xyzw, s2
    sample_indexable(texture2d)(float,float,float,float) r12.xyz, r8.ywyy, t4.xyzw, s2
    add r10.xyz, r10.xyzx, -r12.xyzx
    mad r10.xyz, cb0[76].zzzz, r10.xyzx, r12.xyzx
    mov r12.xz, l(0,0,0,0)
    mov r12.yw, r8.zzzw
    sample_indexable(texture2d)(float,float,float,float) r13.xyz, r12.xyxx, t4.xyzw, s2
    sample_indexable(texture2d)(float,float,float,float) r12.xyz, r12.zwzz, t4.xyzw, s2
    add r13.xyz, -r12.xyzx, r13.xyzx
    mad r12.xyz, cb0[76].zzzz, r13.xyzx, r12.xyzx
  else
    add r13.x, -r0.z, l(1.000000)
    mov r13.y, r8.y
    sample_indexable(texture2d)(float,float,float,float) r10.xyz, r13.yxyy, t4.xyzw, s2
    mov r13.z, l(0)
    sample_indexable(texture2d)(float,float,float,float) r12.xyz, r13.zxzz, t4.xyzw, s2
  endif
  lt r5.w, r0.x, l(1.000000)
  if_nz r5.w
    if_nz r4.w
      mad r0.y, r0.y, l(0.100000), l(0.550000)
      add r13.yw, -r0.zzzy, l(0.000000, 1.000000, 0.000000, 1.000000)
      mov r13.xz, l(0,0,0,0)
      sample_indexable(texture2d)(float,float,float,float) r8.yzw, r13.xyxx, t4.wxyz, s2
      sample_indexable(texture2d)(float,float,float,float) r13.xyz, r13.zwzz, t4.xyzw, s2
      add r8.yzw, r8.yyzw, -r13.xxyz
      mad r8.yzw, cb0[76].zzzz, r8.yyzw, r13.xxyz
    else
      add r13.y, -r0.z, l(1.000000)
      mov r13.x, l(0)
      sample_indexable(texture2d)(float,float,float,float) r8.yzw, r13.xyxx, t4.wxyz, s2
    endif
  else
    mov r8.yzw, l(0,0,0,0)
  endif
  mul r11.xyz, r4.xyzx, r12.xyzx
  ne r0.y, l(0.000000, 0.000000, 0.000000, 0.000000), r8.x
  mul r10.xyz, r4.xyzx, r10.xyzx
  mul r12.xyz, r4.xyzx, cb0[75].xxxx
  movc r10.xyz, r0.yyyy, r10.xyzx, r12.xyzx
  mul r12.xyz, r4.xyzx, r8.yzwy
  mad r8.xyz, -r4.xyzx, r8.yzwy, r10.xyzx
  mad r8.xyz, r0.xxxx, r8.xyzx, r12.xyzx
  movc r5.xyz, r5.wwww, r8.xyzx, r10.xyzx
  eq r0.y, r0.w, l(1.000000)
  movc r0.z, r7.z, cb0[58].w, cb0[62].w
  movc r4.w, r7.z, cb0[59].x, cb0[63].x
  movc r0.z, r7.y, cb0[54].w, r0.z
  movc r4.w, r7.y, cb0[55].x, r4.w
  movc r8.x, r7.x, cb0[50].w, r0.z
  movc r8.y, r7.x, cb0[51].x, r4.w
  movc r0.yz, r0.yyyy, cb0[38].xxyx, r8.xxyx
  dp3 r3.x, r1.xyzx, r3.xzwx
  max r3.x, r3.x, l(0.001000)
  log r3.x, r3.x
  mul r0.y, r0.y, r3.x
  exp r0.y, r0.y
  add r3.x, -r6.z, l(1.000000)
  lt r0.y, r3.x, r0.y
  mul r3.xzw, r0.zzzz, cb0[37].yyzw
  mul r3.xzw, r6.xxxx, r3.xxzw
  and r3.xzw, r0.yyyy, r3.xxzw
  mul r3.xzw, r3.xxzw, cb0[75].xxxx
  and r9.xyz, r0.yyyy, r3.xzwx
endif
mul r3.xzw, r4.xxyz, cb0[43].xxyz
mul r3.xzw, r3.xxzw, cb0[42].zzzz
eq r0.y, r0.w, l(1.000000)
mul r4.xyz, r3.xzwx, cb0[42].wwww
mul r6.xyz, r3.xzwx, cb0[49].xxxx
mul r8.xyz, r3.xzwx, cb0[52].wwww
mul r10.xyz, r3.xzwx, cb0[56].wwww
mul r12.xyz, r3.xzwx, cb0[60].wwww
movc r3.xzw, r7.wwww, r12.xxyz, r3.xxzw
movc r3.xzw, r7.zzzz, r10.xxyz, r3.xxzw
movc r3.xzw, r7.yyyy, r8.xxyz, r3.xxzw
movc r3.xzw, r7.xxxx, r6.xxyz, r3.xxzw
movc r0.yzw, r0.yyyy, r4.xxyz, r3.xxzw
lt r3.x, r0.x, l(1.000000)
mul r4.xyz, r0.xxxx, r9.xyzx
movc r3.xzw, r3.xxxx, r4.xxyz, r9.xxyz
add r3.xzw, r3.xxzw, r5.xxyz
add r0.xyz, r0.yzwy, -r3.xzwx
mad r0.xyz, r2.wwww, r0.xyzx, r3.xzwx
movc r0.xyz, r1.wwww, r0.xyzx, r3.xzwx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r3.xzw, r0.wwww, r1.xxyz
dp3_sat r0.w, r2.xyzx, r3.xzwx
add r0.w, -r0.w, l(1.000000)
max r0.w, r0.w, l(0.000100)
log r0.w, r0.w
mul r0.w, r0.w, cb0[89].x
exp r0.w, r0.w
max r2.xyz, cb0[87].xyzx, cb0[88].xyzx
mul r2.xyz, r0.wwww, r2.xyzx
mad r0.xyz, r2.xyzx, cb0[89].yyyy, r0.xyzx
add r1.w, -r2.w, l(1.000000)
mad r1.w, cb0[89].z, r1.w, r2.w
mad r2.xyz, r2.xyzx, cb0[89].yyyy, r11.xyzx
max r2.w, r0.z, r0.y
max r4.w, r0.x, r2.w
lt r2.w, l(1.000000), r4.w
div r4.xyz, r0.xyzx, r4.wwww
mov r0.w, l(1.000000)
movc r0.xyzw, r2.wwww, r4.xyzw, r0.xyzw
add r3.xzw, -r0.xxyz, r2.xxyz
mad r3.xzw, cb0[85].xxxx, r3.xxzw, r0.xxyz
movc r2.xyz, r3.yyyy, r3.xzwx, r2.xyzx
mul_sat r0.w, r0.w, l(0.050000)
sqrt o1.w, r0.w
mad o0.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[22].x
mul r1.x, cb0[22].y, l(0.00392156886)
movc o2.z, r0.w, r1.x, r2.z
and o0.w, r7.x, l(0x3eaa7efa)
mov o1.xyz, r0.xyzx
mov o2.xy, r2.xyxx
mov o2.w, r1.w
mov o3.x, l(0.0156862754)
mov o4.x, r1.w
mov o5.x, l(0)
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
