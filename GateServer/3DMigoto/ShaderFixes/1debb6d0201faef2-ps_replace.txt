// ---- Created with 3Dmigoto v1.3.16 on Thu Sep 28 00:02:46 2023
Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[17];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[89];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD3,
  float2 v6 : TEXCOORD4,
  uint v7 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float o3 : SV_Target3,
  out float o4 : SV_Target4,
  out float o5 : SV_Target5)
{
  const float4 icb[] = { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = cmp(float2(0,0) != cb0[64].wx);
  r0.z = -0.00999999978 + v1.w;
  r0.z = cmp(r0.z < 0);
  r0.x = r0.x ? r0.z : 0;
  r0.x = cmp((int)v7.x == 0);
  r0.y = cmp(0 != cb0[63].w);
  r0.y = r0.y ? r0.x : 0;
  r0.yz = r0.yy ? v2.zw : v2.xy;
  r1.xyz = v7.xxx ? v3.xyz : -v3.xyz;
  r2.xyz = t0.Sample(s1_s, r0.yz).xyz;
  r0.w = 1 + -cb0[29].y;
  r3.z = max(0.00100000005, r0.w);
  r3.xy = r2.xy * float2(2,2) + float2(-1,-1);
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyw = r3.xyz * r0.www;
  r0.w = cmp(0.99000001 >= r2.w);
  r3.xyz = ddx_coarse(v5.yzx);
  r4.xyz = ddy_coarse(v5.zxy);
  r5.xy = ddx_coarse(r0.yz);
  r5.zw = ddy_coarse(r0.yz);
  r6.xyz = r4.xyz * r1.yzx;
  r4.xyz = r4.zxy * r1.zxy + -r6.xyz;
  r6.xyz = r3.xyz * r1.zxy;
  r3.xyz = r1.yzx * r3.yzx + -r6.xyz;
  r6.xyz = r3.xyz * r5.zzz;
  r6.xyz = r4.xyz * r5.xxx + r6.xyz;
  r3.xyz = r3.xyz * r5.www;
  r3.xyz = r4.xyz * r5.yyy + r3.xyz;
  r1.w = dot(r6.xyz, r6.xyz);
  r3.w = dot(r3.xyz, r3.xyz);
  r1.w = max(r3.w, r1.w);
  r1.w = sqrt(r1.w);
  r1.w = 1 / r1.w;
  r4.xyz = r6.xyz * r1.www;
  r3.w = dot(r4.xyz, r4.xyz);
  r3.w = rsqrt(r3.w);
  r4.xyz = r4.xyz * r3.www;
  r3.xyz = r3.xyz * r1.www;
  r1.w = dot(r3.xyz, r3.xyz);
  r1.w = rsqrt(r1.w);
  r3.xyz = r3.xyz * r1.www;
  r3.xyz = r3.xyz * r2.yyy;
  r3.xyz = r2.xxx * r4.xyz + r3.xyz;
  r2.xyw = r2.www * r1.xyz + r3.xyz;
  r1.w = dot(r2.xyw, r2.xyw);
  r1.w = rsqrt(r1.w);
  r2.xyw = r2.xyw * r1.www;
  r1.xyz = r0.www ? r2.xyw : r1.xyz;
  r2.xy = cmp(float2(0,0.5) < cb0[83].ww);
  r0.w = cmp(0 != v6.y);
  r3.xyz = r0.www ? cb0[84].xyz : cb0[83].xyz;
  r3.xyz = r2.xxx ? r3.xyz : cb0[79].xyz;
  r0.w = dot(r1.xyz, r3.xyz);
  r0.w = r0.w * 0.497500002 + 0.5;
  r1.w = dot(v5.xyz, v5.xyz);
  r1.w = rsqrt(r1.w);
  r4.xyz = v5.xyz * r1.www;
  r3.xyz = v5.xyz * r1.www + r3.xyz;
  r1.w = dot(r3.xyz, r3.xyz);
  r1.w = rsqrt(r1.w);
  r3.xyz = r3.xyz * r1.www;
  r1.w = -1 + cb0[64].z;
  r5.xyzw = t1.SampleBias(s0_s, r0.yz, r1.w).xyzw;
  r2.x = v0.z / v0.w;
  r2.x = cb1[8].z * r2.x + cb1[8].w;
  r2.x = 1 / r2.x;
  r2.w = cb0[30].x * r2.x + cb0[29].z;
  r3.w = min(0.99000001, cb0[30].y);
  r2.w = min(r3.w, r2.w);
  r2.x = cmp(r2.x >= cb0[30].z);
  r2.x = r2.x ? 1.000000 : 0;
  r3.w = cb0[29].w * r2.x;
  r2.w = 1 + -r2.w;
  r2.z = r2.z + -r2.w;
  r2.x = cb0[29].w * r2.x + r2.z;
  r2.z = r3.w + r3.w;
  r2.x = saturate(r2.x / r2.z);
  r6.xyz = cb0[31].xyz * r5.xyz + -r5.xyz;
  r2.xzw = r2.xxx * r6.xyz + r5.xyz;
  r5.xyz = cmp(cb0[26].xxx == float3(3,1,2));
  r3.w = cb0[38].z * r5.w;
  r6.xyz = cb0[39].xyz + -r2.xzw;
  r6.xyz = r3.www * r6.xyz + r2.xzw;
  r2.xzw = r5.xxx ? r6.xyz : r2.xzw;
  r3.w = -cb0[26].y + r5.w;
  r3.w = cmp(r3.w < 0);
  r3.w = r5.y ? r3.w : 0;
  if (r3.w != 0) discard;
  r6.xyzw = t2.SampleBias(s2_s, r0.yz, r1.w).xyzw;
  r0.yz = cmp(float2(0,0) != cb0[33].xy);
  r0.y = r0.y ? r6.y : 0.5;
  r1.w = cmp(0 != cb0[48].x);
  r7.xyzw = cmp(r6.wwww >= float4(0.800000012,0.400000006,0.200000003,0.600000024));
  r1.w = r1.w ? r7.x : 0;
  r1.w = r1.w ? 2 : 1;
  r3.w = cmp(0 != cb0[51].w);
  r3.w = r7.y ? r3.w : 0;
  r8.xyz = cmp(r6.www < float3(0.600000024,0.400000006,0.800000012));
  r3.w = r3.w ? r8.x : 0;
  r1.w = r3.w ? 3 : r1.w;
  r3.w = cmp(0 != cb0[55].w);
  r3.w = r7.z ? r3.w : 0;
  r3.w = r8.y ? r3.w : 0;
  r1.w = r3.w ? 4 : r1.w;
  r3.w = cmp(0 != cb0[59].w);
  r3.w = r7.w ? r3.w : 0;
  r3.w = r8.z ? r3.w : 0;
  r1.w = r3.w ? 5 : r1.w;
  r7.xyzw = cmp(r1.wwww == float4(2,3,4,5));
  r8.xyz = r7.xxx ? cb0[48].yzw : cb0[23].xyz;
  r8.xyz = r7.yyy ? cb0[52].xyz : r8.xyz;
  r8.xyz = r7.zzz ? cb0[56].xyz : r8.xyz;
  r8.xyz = r7.www ? cb0[60].xyz : r8.xyz;
  r2.xzw = r8.xyz * r2.xzw;
  r3.w = cmp(0.00999999978 < r5.w);
  r3.w = r3.w ? r5.z : 0;
  r4.w = r3.w ? r5.w : 0;
  r5.x = v1.x * r0.y;
  r0.y = r0.z ? r5.x : r0.y;
  r0.z = cmp(r0.y < 0.0500000007);
  r5.x = cmp(0.949999988 < r0.y);
  r0.y = r0.w + r0.y;
  r0.y = 0.5 * r0.y;
  r0.y = r5.x ? 1 : r0.y;
  r0.y = r0.z ? 0 : r0.y;
  r0.z = cmp(r0.y < cb0[33].z);
  r0.y = cb0[33].z + -r0.y;
  r5.y = r0.y / cb0[33].z;
  r0.y = cmp(0 != cb0[36].y);
  r0.w = v1.y + v1.y;
  r0.w = max(0.00999999978, r0.w);
  r0.w = cb0[36].x * r0.w;
  r0.y = r0.y ? r0.w : cb0[36].x;
  r0.y = r5.y / r0.y;
  r0.y = min(1, r0.y);
  r5.z = 1 + -r0.y;
  r5.yz = r0.zz ? r5.yz : float2(0,1);
  r5.x = r0.z ? 1.000000 : 0;
  r0.y = cmp(9.99999975e-06 < v6.x);
  r0.x = (int)r0.x | (int)r0.y;
  r0.xy = r0.xx ? float2(1,0) : r5.xz;
  r5.x = cmp(0.5 < cb0[79].w);
  r5.z = cb0[78].w + cb0[78].w;
  r5.z = min(1, r5.z);
  r5.x = r5.x ? r5.z : 1;
  r5.z = cmp(0.899999976 < r6.x);
  if (r5.z != 0) {
    r5.zw = cb2[15].xy * r1.yy;
    r5.zw = cb2[14].xy * r1.xx + r5.zw;
    r8.yz = cb2[16].xy * r1.zz + r5.zw;
    r8.x = cb0[67].y * r8.y;
    r5.zw = r8.xz * float2(0.5,0.5) + float2(0.5,0.5);
    r5.z = t3.Sample(s4_s, r5.zw).x;
    r5.z = saturate(cb0[67].x * r5.z);
    r8.xyz = -cb0[69].xyz + cb0[68].xyz;
    r8.xyz = r5.zzz * r8.xyz + cb0[69].xyz;
    r8.xyz = r8.xyz * r2.xzw;
    r5.z = dot(r1.xyz, r3.xyz);
    r5.z = max(0.00100000005, r5.z);
    r5.z = log2(r5.z);
    r5.z = cb0[70].w * r5.z;
    r5.z = exp2(r5.z);
    r9.x = saturate(cb0[71].w * r5.z);
    r5.z = cmp(cb0[72].z < r9.x);
    if (r5.z != 0) {
      r10.xyz = cb0[73].xyz;
    } else {
      r5.z = cmp(0 != cb0[72].y);
      if (r5.z != 0) {
        r9.y = 0.5;
        r9.yzw = t4.Sample(s5_s, r9.xy).xyz;
        r10.xyz = r9.yzw * r6.zzz;
      } else {
        r9.xyz = cb0[71].xyz * r9.xxx;
        r10.xyz = r9.xyz * r6.zzz;
      }
    }
    r5.z = cmp(0 != v6.x);
    r9.xyz = cb0[72].xxx * r10.xyz;
    r9.xyz = r5.zzz ? r9.xyz : r10.xyz;
    r5.z = cmp(0 != cb0[36].z);
    r10.xyz = float3(-1,-1,-1) + cb0[70].xyz;
    r10.xyz = r5.yyy * r10.xyz + float3(1,1,1);
    r5.yzw = r5.zzz ? r10.xyz : cb0[70].xyz;
    r10.xyz = r8.xyz * r5.yzw;
    r6.y = cmp(0 != r0.x);
    r11.xyz = cb0[75].xxx * r8.xyz;
    r11.xyz = r6.yyy ? r10.xyz : r11.xyz;
    r6.y = cmp(r5.x < 1);
    r5.yzw = -r8.xyz * r5.yzw + r11.xyz;
    r5.yzw = r5.xxx * r5.yzw + r10.xyz;
    r5.yzw = r6.yyy ? r5.yzw : r11.xyz;
    r8.xyz = cb0[75].xxx * r9.xyz;
  } else {
    r6.y = -1 + r1.w;
    r6.w = r6.y * 0.100000001 + 0.0500000007;
    r8.w = cmp(0 != cb0[34].w);
    if (r8.w != 0) {
      r9.x = r6.y * 0.100000001 + 0.550000012;
      r0.z = 1 + -r6.w;
      r0.w = 1 + -r9.x;
      r9.xyz = t5.Sample(s3_s, r0.yz).xyz;
      r11.xyz = t5.Sample(s3_s, r0.yw).xyz;
      r9.xyz = -r11.xyz + r9.xyz;
      r9.xyz = cb0[76].zzz * r9.xyz + r11.xyz;
      r11.xz = float2(0,0);
      r11.yw = r0.zw;
      r12.xyz = t5.Sample(s3_s, r11.xy).xyz;
      r11.xyz = t5.Sample(s3_s, r11.zw).xyz;
      r12.xyz = r12.xyz + -r11.xyz;
      r11.xyz = cb0[76].zzz * r12.xyz + r11.xyz;
    } else {
      r12.x = 1 + -r6.w;
      r12.y = r0.y;
      r9.xyz = t5.Sample(s3_s, r12.yx).xyz;
      r12.z = 0;
      r11.xyz = t5.Sample(s3_s, r12.zx).xyz;
    }
    r0.y = cmp(r5.x < 1);
    if (r0.y != 0) {
      if (r8.w != 0) {
        r0.z = r6.y * 0.100000001 + 0.550000012;
        r12.y = 1 + -r6.w;
        r12.w = 1 + -r0.z;
        r12.xz = float2(0,0);
        r13.xyz = t5.Sample(s3_s, r12.xy).xyz;
        r12.xyz = t5.Sample(s3_s, r12.zw).xyz;
        r13.xyz = r13.xyz + -r12.xyz;
        r12.xyz = cb0[76].zzz * r13.xyz + r12.xyz;
      } else {
        r13.y = 1 + -r6.w;
        r13.x = 0;
        r12.xyz = t5.Sample(s3_s, r13.xy).xyz;
      }
    } else {
      r12.xyz = float3(0,0,0);
    }
    r10.xyz = r11.xyz * r2.xzw;
    r0.x = cmp(0 != r0.x);
    r9.xyz = r9.xyz * r2.xzw;
    r11.xyz = cb0[75].xxx * r2.xzw;
    r0.xzw = r0.xxx ? r9.xyz : r11.xyz;
    r9.xyz = r12.xyz * r2.xzw;
    r11.xyz = -r2.xzw * r12.xyz + r0.xzw;
    r9.xyz = r5.xxx * r11.xyz + r9.xyz;
    r5.yzw = r0.yyy ? r9.xyz : r0.xzw;
    r0.x = cmp(r1.w == 1.000000);
    r0.y = r7.z ? cb0[58].w : cb0[62].w;
    r0.z = r7.z ? cb0[59].x : cb0[63].x;
    r0.y = r7.y ? cb0[54].w : r0.y;
    r0.z = r7.y ? cb0[55].x : r0.z;
    r9.x = r7.x ? cb0[50].w : r0.y;
    r9.y = r7.x ? cb0[51].x : r0.z;
    r0.xy = r0.xx ? cb0[38].xy : r9.xy;
    r0.z = dot(r1.xyz, r3.xyz);
    r0.z = max(0.00100000005, r0.z);
    r0.z = log2(r0.z);
    r0.x = r0.x * r0.z;
    r0.x = exp2(r0.x);
    r0.z = 1 + -r6.z;
    r0.x = cmp(r0.z < r0.x);
    r0.yzw = cb0[37].yzw * r0.yyy;
    r0.yzw = r0.yzw * r6.xxx;
    r0.yzw = r0.xxx ? r0.yzw : 0;
    r0.yzw = cb0[75].xxx * r0.yzw;
    r8.xyz = r0.xxx ? r0.yzw : 0;
  }
  r0.xyz = cb0[43].xyz * r2.xzw;
  r0.xyz = cb0[42].zzz * r0.xyz;
  r0.w = cmp(r1.w == 1.000000);
  r2.xzw = cb0[42].www * r0.xyz;
  r3.xyz = cb0[49].xxx * r0.xyz;
  r6.xyz = cb0[52].www * r0.xyz;
  r9.xyz = cb0[56].www * r0.xyz;
  r11.xyz = cb0[60].www * r0.xyz;
  r0.xyz = r7.www ? r11.xyz : r0.xyz;
  r0.xyz = r7.zzz ? r9.xyz : r0.xyz;
  r0.xyz = r7.yyy ? r6.xyz : r0.xyz;
  r0.xyz = r7.xxx ? r3.xyz : r0.xyz;
  r0.xyz = r0.www ? r2.xzw : r0.xyz;
  r0.w = cmp(r5.x < 1);
  r2.xzw = r8.xyz * r5.xxx;
  r2.xzw = r0.www ? r2.xzw : r8.xyz;
  r2.xzw = r5.yzw + r2.xzw;
  r0.xyz = -r2.xzw + r0.xyz;
  r0.xyz = r4.www * r0.xyz + r2.xzw;
  r0.xyz = r3.www ? r0.xyz : r2.xzw;
  r0.w = -0.699999988 + cb0[88].x;
  r0.w = saturate(r0.w * -3.33333325 + 1);
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r2.xzw = r1.xyz * r1.www;
  r1.w = dot(r2.xzw, r4.xyz);
  r1.w = 1 + -r1.w;
  r1.w = max(9.99999975e-05, r1.w);
  r0.w = 5 * r0.w;
  r1.w = log2(r1.w);
  r0.w = r1.w * r0.w;
  r0.w = exp2(r0.w);
  r2.xzw = cb0[87].xyz * r0.www;
  r0.xyz = r2.xzw * cb0[88].xxx + r0.xyz;
  r2.xzw = r2.xzw * cb0[88].xxx + r10.xyz;
  r1.w = max(r0.y, r0.z);
  r3.w = max(r1.w, r0.x);
  r1.w = cmp(1 < r3.w);
  r3.xyz = r0.xyz / r3.www;
  r0.w = 1;
  r0.xyzw = r1.wwww ? r3.xyzw : r0.xyzw;
  r3.xyz = r2.xzw + -r0.xyz;
  r3.xyz = cb0[85].xxx * r3.xyz + r0.xyz;
  r2.xyz = r2.yyy ? r3.xyz : r2.xzw;
  r0.w = saturate(0.0500000007 * r0.w);
  o1.w = sqrt(r0.w);
  o0.xyz = r1.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  r0.w = cmp(0 != cb0[22].x);
  r1.x = 0.00392156886 * cb0[22].y;
  o2.z = r0.w ? r1.x : r2.z;
  o0.w = r7.x ? 0.333000 : 0;
  o1.xyz = r0.xyz;
  o2.xy = r2.xy;
  o2.w = r4.w;
  o3.x = 0.0156862754;
  o4.x = r4.w;
  o5.x = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Sep 28 00:02:46 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float     zw
// COLOR                    0   xyzw        1     NONE   float   xy w
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyzw        3     NONE   float   xyz
// TEXCOORD                 2   xyzw        4     NONE   float   xy w
// TEXCOORD                 3   xyz         5     NONE   float   xyz
// TEXCOORD                 4   xy          6     NONE   float   xy
// SV_IsFrontFace           0   x           7    FFACE    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   x           3   TARGET   float   x
// SV_Target                4   x           4   TARGET   float   x
// SV_Target                5   x           5   TARGET   float   x
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer CB0[89], immediateIndexed
dcl_constantbuffer CB1[9], immediateIndexed
dcl_constantbuffer CB2[17], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps_siv linear noperspective v0.zw, position
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyw
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xy
dcl_input_ps_sgv constant v7.x, is_front_face
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.x
dcl_output o4.x
dcl_output o5.x
dcl_temps 14
ne r0.xy, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[64].wxww
add r0.z, v1.w, l(-0.010000)
lt r0.z, r0.z, l(0.000000)
and r0.x, r0.x, r0.z
discard_nz r0.x
if_nz r0.y
  lt r0.x, cb0[64].y, l(0.950000)
  if_nz r0.x
    div r0.xy, v4.yxyy, v4.wwww
    mul r0.xy, r0.xyxx, cb1[7].yxyy
    mul r0.xy, r0.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000)
    ge r0.zw, r0.xxxy, -r0.xxxy
    frc r0.xy, |r0.xyxx|
    movc r0.xy, r0.zwzz, r0.xyxx, -r0.xyxx
    mul r0.xy, r0.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000)
    ftou r0.xy, r0.xyxx
    dp4 r1.x, cb0[8].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.y, cb0[9].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.z, cb0[10].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.w, cb0[11].xyzw, icb[r0.y + 0].xyzw
    dp4 r0.x, r1.xyzw, icb[r0.x + 0].xyzw
    mad r0.x, cb0[64].y, l(17.000000), -r0.x
    add r0.x, r0.x, l(-0.010000)
    lt r0.x, r0.x, l(0.000000)
    discard_nz r0.x
  endif
endif
ieq r0.x, v7.x, l(0)
ne r0.y, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[63].w
and r0.y, r0.y, r0.x
movc r0.yz, r0.yyyy, v2.zzwz, v2.xxyx
movc r1.xyz, v7.xxxx, v3.xyzx, -v3.xyzx
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r0.yzyy, t0.xyzw, s1
add r0.w, -cb0[29].y, l(1.000000)
max r3.z, r0.w, l(0.001000)
mad r3.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r2.xyw, r0.wwww, r3.xyxz
ge r0.w, l(0.990000), r2.w
deriv_rtx_coarse r3.xyz, v5.yzxy
deriv_rty_coarse r4.xyz, v5.zxyz
deriv_rtx_coarse r5.xy, r0.yzyy
deriv_rty_coarse r5.zw, r0.yyyz
mul r6.xyz, r1.yzxy, r4.xyzx
mad r4.xyz, r4.zxyz, r1.zxyz, -r6.xyzx
mul r6.xyz, r1.zxyz, r3.xyzx
mad r3.xyz, r1.yzxy, r3.yzxy, -r6.xyzx
mul r6.xyz, r5.zzzz, r3.xyzx
mad r6.xyz, r4.xyzx, r5.xxxx, r6.xyzx
mul r3.xyz, r5.wwww, r3.xyzx
mad r3.xyz, r4.xyzx, r5.yyyy, r3.xyzx
dp3 r1.w, r6.xyzx, r6.xyzx
dp3 r3.w, r3.xyzx, r3.xyzx
max r1.w, r1.w, r3.w
sqrt r1.w, r1.w
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
mul r4.xyz, r1.wwww, r6.xyzx
dp3 r3.w, r4.xyzx, r4.xyzx
rsq r3.w, r3.w
mul r4.xyz, r3.wwww, r4.xyzx
mul r3.xyz, r1.wwww, r3.xyzx
dp3 r1.w, r3.xyzx, r3.xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, r3.xyzx
mul r3.xyz, r2.yyyy, r3.xyzx
mad r3.xyz, r2.xxxx, r4.xyzx, r3.xyzx
mad r2.xyw, r2.wwww, r1.xyxz, r3.xyxz
dp3 r1.w, r2.xywx, r2.xywx
rsq r1.w, r1.w
mul r2.xyw, r1.wwww, r2.xyxw
movc r1.xyz, r0.wwww, r2.xywx, r1.xyzx
lt r2.xy, l(0.000000, 0.500000, 0.000000, 0.000000), cb0[83].wwww
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), v6.y
movc r3.xyz, r0.wwww, cb0[84].xyzx, cb0[83].xyzx
movc r3.xyz, r2.xxxx, r3.xyzx, cb0[79].xyzx
dp3 r0.w, r1.xyzx, r3.xyzx
mad r0.w, r0.w, l(0.497500), l(0.500000)
dp3 r1.w, v5.xyzx, v5.xyzx
rsq r1.w, r1.w
mul r4.xyz, r1.wwww, v5.xyzx
mad r3.xyz, v5.xyzx, r1.wwww, r3.xyzx
dp3 r1.w, r3.xyzx, r3.xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, r3.xyzx
add r1.w, cb0[64].z, l(-1.000000)
sample_b_indexable(texture2d)(float,float,float,float) r5.xyzw, r0.yzyy, t1.xyzw, s0, r1.w
div r2.x, v0.z, v0.w
mad r2.x, cb1[8].z, r2.x, cb1[8].w
div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
mad r2.w, cb0[30].x, r2.x, cb0[29].z
min r3.w, cb0[30].y, l(0.990000)
min r2.w, r2.w, r3.w
ge r2.x, r2.x, cb0[30].z
and r2.x, r2.x, l(0x3f800000)
mul r3.w, r2.x, cb0[29].w
add r2.w, -r2.w, l(1.000000)
add r2.z, -r2.w, r2.z
mad r2.x, cb0[29].w, r2.x, r2.z
add r2.z, r3.w, r3.w
div_sat r2.x, r2.x, r2.z
mad r6.xyz, cb0[31].xyzx, r5.xyzx, -r5.xyzx
mad r2.xzw, r2.xxxx, r6.xxyz, r5.xxyz
eq r5.xyz, cb0[26].xxxx, l(3.000000, 1.000000, 2.000000, 0.000000)
mul r3.w, r5.w, cb0[38].z
add r6.xyz, -r2.xzwx, cb0[39].xyzx
mad r6.xyz, r3.wwww, r6.xyzx, r2.xzwx
movc r2.xzw, r5.xxxx, r6.xxyz, r2.xxzw
add r3.w, r5.w, -cb0[26].y
lt r3.w, r3.w, l(0.000000)
and r3.w, r5.y, r3.w
discard_nz r3.w
sample_b_indexable(texture2d)(float,float,float,float) r6.xyzw, r0.yzyy, t2.xyzw, s2, r1.w
ne r0.yz, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[33].xxyx
movc r0.y, r0.y, r6.y, l(0.500000)
ne r1.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[48].x
ge r7.xyzw, r6.wwww, l(0.800000, 0.400000, 0.200000, 0.600000)
and r1.w, r1.w, r7.x
movc r1.w, r1.w, l(2.000000), l(1.000000)
ne r3.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[51].w
and r3.w, r7.y, r3.w
lt r8.xyz, r6.wwww, l(0.600000, 0.400000, 0.800000, 0.000000)
and r3.w, r3.w, r8.x
movc r1.w, r3.w, l(3.000000), r1.w
ne r3.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[55].w
and r3.w, r7.z, r3.w
and r3.w, r8.y, r3.w
movc r1.w, r3.w, l(4.000000), r1.w
ne r3.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[59].w
and r3.w, r7.w, r3.w
and r3.w, r8.z, r3.w
movc r1.w, r3.w, l(5.000000), r1.w
eq r7.xyzw, r1.wwww, l(2.000000, 3.000000, 4.000000, 5.000000)
movc r8.xyz, r7.xxxx, cb0[48].yzwy, cb0[23].xyzx
movc r8.xyz, r7.yyyy, cb0[52].xyzx, r8.xyzx
movc r8.xyz, r7.zzzz, cb0[56].xyzx, r8.xyzx
movc r8.xyz, r7.wwww, cb0[60].xyzx, r8.xyzx
mul r2.xzw, r2.xxzw, r8.xxyz
lt r3.w, l(0.010000), r5.w
and r3.w, r3.w, r5.z
and r4.w, r5.w, r3.w
mul r5.x, r0.y, v1.x
movc r0.y, r0.z, r5.x, r0.y
lt r0.z, r0.y, l(0.050000)
lt r5.x, l(0.950000), r0.y
add r0.y, r0.y, r0.w
mul r0.y, r0.y, l(0.500000)
movc r0.y, r5.x, l(1.000000), r0.y
movc r0.y, r0.z, l(0), r0.y
lt r0.z, r0.y, cb0[33].z
add r0.y, -r0.y, cb0[33].z
div r5.y, r0.y, cb0[33].z
ne r0.y, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[36].y
add r0.w, v1.y, v1.y
max r0.w, r0.w, l(0.010000)
mul r0.w, r0.w, cb0[36].x
movc r0.y, r0.y, r0.w, cb0[36].x
div r0.y, r5.y, r0.y
min r0.y, r0.y, l(1.000000)
add r5.z, -r0.y, l(1.000000)
movc r5.yz, r0.zzzz, r5.yyzy, l(0,0,1.000000,0)
and r5.x, r0.z, l(0x3f800000)
lt r0.y, l(0.000010), v6.x
or r0.x, r0.x, r0.y
movc r0.xy, r0.xxxx, l(1.000000,0,0,0), r5.xzxx
lt r5.x, l(0.500000), cb0[79].w
add r5.z, cb0[78].w, cb0[78].w
min r5.z, r5.z, l(1.000000)
movc r5.x, r5.x, r5.z, l(1.000000)
lt r5.z, l(0.900000), r6.x
if_nz r5.z
  mul r5.zw, r1.yyyy, cb2[15].xxxy
  mad r5.zw, cb2[14].xxxy, r1.xxxx, r5.zzzw
  mad r8.yz, cb2[16].xxyx, r1.zzzz, r5.zzwz
  mul r8.x, r8.y, cb0[67].y
  mad r5.zw, r8.xxxz, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
  sample_indexable(texture2d)(float,float,float,float) r5.z, r5.zwzz, t3.yzxw, s4
  mul_sat r5.z, r5.z, cb0[67].x
  add r8.xyz, cb0[68].xyzx, -cb0[69].xyzx
  mad r8.xyz, r5.zzzz, r8.xyzx, cb0[69].xyzx
  mul r8.xyz, r2.xzwx, r8.xyzx
  dp3 r5.z, r1.xyzx, r3.xyzx
  max r5.z, r5.z, l(0.001000)
  log r5.z, r5.z
  mul r5.z, r5.z, cb0[70].w
  exp r5.z, r5.z
  mul_sat r9.x, r5.z, cb0[71].w
  lt r5.z, cb0[72].z, r9.x
  if_nz r5.z
    mov r10.xyz, cb0[73].xyzx
  else
    ne r5.z, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[72].y
    if_nz r5.z
      mov r9.y, l(0.500000)
      sample_indexable(texture2d)(float,float,float,float) r9.yzw, r9.xyxx, t4.wxyz, s5
      mul r10.xyz, r6.zzzz, r9.yzwy
    else
      mul r9.xyz, r9.xxxx, cb0[71].xyzx
      mul r10.xyz, r6.zzzz, r9.xyzx
    endif
  endif
  ne r5.z, l(0.000000, 0.000000, 0.000000, 0.000000), v6.x
  mul r9.xyz, r10.xyzx, cb0[72].xxxx
  movc r9.xyz, r5.zzzz, r9.xyzx, r10.xyzx
  ne r5.z, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[36].z
  add r10.xyz, cb0[70].xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
  mad r10.xyz, r5.yyyy, r10.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  movc r5.yzw, r5.zzzz, r10.xxyz, cb0[70].xxyz
  mul r10.xyz, r5.yzwy, r8.xyzx
  ne r6.y, l(0.000000, 0.000000, 0.000000, 0.000000), r0.x
  mul r11.xyz, r8.xyzx, cb0[75].xxxx
  movc r11.xyz, r6.yyyy, r10.xyzx, r11.xyzx
  lt r6.y, r5.x, l(1.000000)
  mad r5.yzw, -r8.xxyz, r5.yyzw, r11.xxyz
  mad r5.yzw, r5.xxxx, r5.yyzw, r10.xxyz
  movc r5.yzw, r6.yyyy, r5.yyzw, r11.xxyz
  mul r8.xyz, r9.xyzx, cb0[75].xxxx
else
  add r6.y, r1.w, l(-1.000000)
  mad r6.w, r6.y, l(0.100000), l(0.050000)
  ne r8.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[34].w
  if_nz r8.w
    mad r9.x, r6.y, l(0.100000), l(0.550000)
    add r0.z, -r6.w, l(1.000000)
    add r0.w, -r9.x, l(1.000000)
    sample_indexable(texture2d)(float,float,float,float) r9.xyz, r0.yzyy, t5.xyzw, s3
    sample_indexable(texture2d)(float,float,float,float) r11.xyz, r0.ywyy, t5.xyzw, s3
    add r9.xyz, r9.xyzx, -r11.xyzx
    mad r9.xyz, cb0[76].zzzz, r9.xyzx, r11.xyzx
    mov r11.xz, l(0,0,0,0)
    mov r11.yw, r0.zzzw
    sample_indexable(texture2d)(float,float,float,float) r12.xyz, r11.xyxx, t5.xyzw, s3
    sample_indexable(texture2d)(float,float,float,float) r11.xyz, r11.zwzz, t5.xyzw, s3
    add r12.xyz, -r11.xyzx, r12.xyzx
    mad r11.xyz, cb0[76].zzzz, r12.xyzx, r11.xyzx
  else
    add r12.x, -r6.w, l(1.000000)
    mov r12.y, r0.y
    sample_indexable(texture2d)(float,float,float,float) r9.xyz, r12.yxyy, t5.xyzw, s3
    mov r12.z, l(0)
    sample_indexable(texture2d)(float,float,float,float) r11.xyz, r12.zxzz, t5.xyzw, s3
  endif
  lt r0.y, r5.x, l(1.000000)
  if_nz r0.y
    if_nz r8.w
      mad r0.z, r6.y, l(0.100000), l(0.550000)
      add r12.y, -r6.w, l(1.000000)
      add r12.w, -r0.z, l(1.000000)
      mov r12.xz, l(0,0,0,0)
      sample_indexable(texture2d)(float,float,float,float) r13.xyz, r12.xyxx, t5.xyzw, s3
      sample_indexable(texture2d)(float,float,float,float) r12.xyz, r12.zwzz, t5.xyzw, s3
      add r13.xyz, -r12.xyzx, r13.xyzx
      mad r12.xyz, cb0[76].zzzz, r13.xyzx, r12.xyzx
    else
      add r13.y, -r6.w, l(1.000000)
      mov r13.x, l(0)
      sample_indexable(texture2d)(float,float,float,float) r12.xyz, r13.xyxx, t5.xyzw, s3
    endif
  else
    mov r12.xyz, l(0,0,0,0)
  endif
  mul r10.xyz, r2.xzwx, r11.xyzx
  ne r0.x, l(0.000000, 0.000000, 0.000000, 0.000000), r0.x
  mul r9.xyz, r2.xzwx, r9.xyzx
  mul r11.xyz, r2.xzwx, cb0[75].xxxx
  movc r0.xzw, r0.xxxx, r9.xxyz, r11.xxyz
  mul r9.xyz, r2.xzwx, r12.xyzx
  mad r11.xyz, -r2.xzwx, r12.xyzx, r0.xzwx
  mad r9.xyz, r5.xxxx, r11.xyzx, r9.xyzx
  movc r5.yzw, r0.yyyy, r9.xxyz, r0.xxzw
  eq r0.x, r1.w, l(1.000000)
  movc r0.y, r7.z, cb0[58].w, cb0[62].w
  movc r0.z, r7.z, cb0[59].x, cb0[63].x
  movc r0.y, r7.y, cb0[54].w, r0.y
  movc r0.z, r7.y, cb0[55].x, r0.z
  movc r9.x, r7.x, cb0[50].w, r0.y
  movc r9.y, r7.x, cb0[51].x, r0.z
  movc r0.xy, r0.xxxx, cb0[38].xyxx, r9.xyxx
  dp3 r0.z, r1.xyzx, r3.xyzx
  max r0.z, r0.z, l(0.001000)
  log r0.z, r0.z
  mul r0.x, r0.z, r0.x
  exp r0.x, r0.x
  add r0.z, -r6.z, l(1.000000)
  lt r0.x, r0.z, r0.x
  mul r0.yzw, r0.yyyy, cb0[37].yyzw
  mul r0.yzw, r6.xxxx, r0.yyzw
  and r0.yzw, r0.yyzw, r0.xxxx
  mul r0.yzw, r0.yyzw, cb0[75].xxxx
  and r8.xyz, r0.yzwy, r0.xxxx
endif
mul r0.xyz, r2.xzwx, cb0[43].xyzx
mul r0.xyz, r0.xyzx, cb0[42].zzzz
eq r0.w, r1.w, l(1.000000)
mul r2.xzw, r0.xxyz, cb0[42].wwww
mul r3.xyz, r0.xyzx, cb0[49].xxxx
mul r6.xyz, r0.xyzx, cb0[52].wwww
mul r9.xyz, r0.xyzx, cb0[56].wwww
mul r11.xyz, r0.xyzx, cb0[60].wwww
movc r0.xyz, r7.wwww, r11.xyzx, r0.xyzx
movc r0.xyz, r7.zzzz, r9.xyzx, r0.xyzx
movc r0.xyz, r7.yyyy, r6.xyzx, r0.xyzx
movc r0.xyz, r7.xxxx, r3.xyzx, r0.xyzx
movc r0.xyz, r0.wwww, r2.xzwx, r0.xyzx
lt r0.w, r5.x, l(1.000000)
mul r2.xzw, r5.xxxx, r8.xxyz
movc r2.xzw, r0.wwww, r2.xxzw, r8.xxyz
add r2.xzw, r2.xxzw, r5.yyzw
add r0.xyz, r0.xyzx, -r2.xzwx
mad r0.xyz, r4.wwww, r0.xyzx, r2.xzwx
movc r0.xyz, r3.wwww, r0.xyzx, r2.xzwx
add r0.w, cb0[88].x, l(-0.700000)
mad_sat r0.w, r0.w, l(-3.33333325), l(1.000000)
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r2.xzw, r1.wwww, r1.xxyz
dp3 r1.w, r2.xzwx, r4.xyzx
add r1.w, -r1.w, l(1.000000)
max r1.w, r1.w, l(0.000100)
mul r0.w, r0.w, l(5.000000)
log r1.w, r1.w
mul r0.w, r0.w, r1.w
exp r0.w, r0.w
mul r2.xzw, r0.wwww, cb0[87].xxyz
mad r0.xyz, r2.xzwx, cb0[88].xxxx, r0.xyzx
mad r2.xzw, r2.xxzw, cb0[88].xxxx, r10.xxyz
max r1.w, r0.z, r0.y
max r3.w, r0.x, r1.w
lt r1.w, l(1.000000), r3.w
div r3.xyz, r0.xyzx, r3.wwww
mov r0.w, l(1.000000)
movc r0.xyzw, r1.wwww, r3.xyzw, r0.xyzw
add r3.xyz, -r0.xyzx, r2.xzwx
mad r3.xyz, cb0[85].xxxx, r3.xyzx, r0.xyzx
movc r2.xyz, r2.yyyy, r3.xyzx, r2.xzwx
mul_sat r0.w, r0.w, l(0.050000)
sqrt o1.w, r0.w
mad o0.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[22].x
mul r1.x, cb0[22].y, l(0.00392156886)
movc o2.z, r0.w, r1.x, r2.z
and o0.w, r7.x, l(0x3eaa7efa)
mov o1.xyz, r0.xyzx
mov o2.xy, r2.xyxx
mov o2.w, r4.w
mov o3.x, l(0.0156862754)
mov o4.x, r4.w
mov o5.x, l(0)
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
