// ---- Created with 3Dmigoto v1.3.16 on Wed Sep 27 22:55:10 2023
Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[89];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD3,
  float2 v6 : TEXCOORD4,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float o3 : SV_Target3,
  out float o4 : SV_Target4,
  out float o5 : SV_Target5)
{
  const float4 icb[] = { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = cmp(float2(0,0) != cb0[64].wx);
  r0.z = -0.00999999978 + v1.w;
  r0.z = cmp(r0.z < 0);
  r0.x = r0.x ? r0.z : 0;
  r0.x = dot(v5.xyz, v5.xyz);
  r0.x = rsqrt(r0.x);
  r0.yzw = v5.xyz * r0.xxx;
  r1.xy = cmp(float2(0,0.5) < cb0[83].ww);
  r1.z = cmp(0 != v6.y);
  r2.xyz = r1.zzz ? cb0[84].xyz : cb0[83].xyz;
  r1.xzw = r1.xxx ? r2.xyz : cb0[79].xyz;
  r1.xzw = v5.xyz * r0.xxx + r1.xzw;
  r0.x = dot(r1.xzw, r1.xzw);
  r0.x = rsqrt(r0.x);
  r1.xzw = r1.xzw * r0.xxx;
  r0.x = -1 + cb0[64].z;
  r2.xyzw = t0.SampleBias(s0_s, v2.xy, r0.x).xyzw;
  r3.xyz = cmp(cb0[26].xxx == float3(3,1,2));
  r3.w = cb0[38].z * r2.w;
  r4.xyz = cb0[39].xyz + -r2.xyz;
  r4.xyz = r3.www * r4.xyz + r2.xyz;
  r2.xyz = r3.xxx ? r4.xyz : r2.xyz;
  r3.x = -cb0[26].y + r2.w;
  r3.x = cmp(r3.x < 0);
  r3.x = r3.y ? r3.x : 0;
  if (r3.x != 0) discard;
  r4.xyzw = t1.SampleBias(s1_s, v2.xy, r0.x).xyzw;
  r3.xy = cmp(float2(0,0) != cb0[33].xy);
  r0.x = r3.x ? r4.y : 0.5;
  r3.x = cmp(0 != cb0[48].x);
  r5.xyzw = cmp(r4.wwww >= float4(0.800000012,0.400000006,0.200000003,0.600000024));
  r3.x = r3.x ? r5.x : 0;
  r3.x = r3.x ? 2 : 1;
  r3.w = cmp(0 != cb0[51].w);
  r3.w = r5.y ? r3.w : 0;
  r6.xyz = cmp(r4.www < float3(0.600000024,0.400000006,0.800000012));
  r3.w = r3.w ? r6.x : 0;
  r3.x = r3.w ? 3 : r3.x;
  r3.w = cmp(0 != cb0[55].w);
  r3.w = r5.z ? r3.w : 0;
  r3.w = r6.y ? r3.w : 0;
  r3.x = r3.w ? 4 : r3.x;
  r3.w = cmp(0 != cb0[59].w);
  r3.w = r5.w ? r3.w : 0;
  r3.w = r6.z ? r3.w : 0;
  r3.x = r3.w ? 5 : r3.x;
  r5.xyzw = cmp(r3.xxxx == float4(2,3,4,5));
  r6.xyz = r5.xxx ? cb0[48].yzw : cb0[23].xyz;
  r6.xyz = r5.yyy ? cb0[52].xyz : r6.xyz;
  r6.xyz = r5.zzz ? cb0[56].xyz : r6.xyz;
  r6.xyz = r5.www ? cb0[60].xyz : r6.xyz;
  r2.xyz = r6.xyz * r2.xyz;
  r3.w = cmp(0.00999999978 < r2.w);
  r3.z = r3.w ? r3.z : 0;
  r2.w = r3.z ? r2.w : 0;
  r3.w = v1.x * r0.x;
  r0.x = r3.y ? r3.w : r0.x;
  r3.y = cmp(r0.x < 0.0500000007);
  r3.w = cmp(0.949999988 < r0.x);
  r0.x = v3.w + r0.x;
  r0.x = 0.5 * r0.x;
  r0.x = r3.w ? 1 : r0.x;
  r0.x = r3.y ? 0 : r0.x;
  r3.y = cmp(r0.x < cb0[33].z);
  r0.x = cb0[33].z + -r0.x;
  r0.x = r0.x / cb0[33].z;
  r3.w = cmp(0 != cb0[36].y);
  r4.y = v1.y + v1.y;
  r4.y = max(0.00999999978, r4.y);
  r4.y = cb0[36].x * r4.y;
  r3.w = r3.w ? r4.y : cb0[36].x;
  r0.x = r0.x / r3.w;
  r0.x = min(1, r0.x);
  r0.x = 1 + -r0.x;
  r6.y = r3.y ? r0.x : 1;
  r6.x = r3.y ? 1.000000 : 0;
  r0.x = cmp(9.99999975e-06 < v6.x);
  r6.xy = r0.xx ? float2(1,0) : r6.xy;
  r0.x = cmp(0.5 < cb0[79].w);
  r3.y = cb0[78].w + cb0[78].w;
  r3.y = min(1, r3.y);
  r0.x = r0.x ? r3.y : 1;
  r3.y = -1 + r3.x;
  r3.w = r3.y * 0.100000001 + 0.0500000007;
  r4.y = cmp(0 != cb0[34].w);
  if (r4.y != 0) {
    r4.w = r3.y * 0.100000001 + 0.550000012;
    r6.z = 1 + -r3.w;
    r6.w = 1 + -r4.w;
    r7.xyz = t2.Sample(s2_s, r6.yz).xyz;
    r8.xyz = t2.Sample(s2_s, r6.yw).xyz;
    r7.xyz = -r8.xyz + r7.xyz;
    r7.xyz = cb0[76].zzz * r7.xyz + r8.xyz;
    r8.xz = float2(0,0);
    r8.yw = r6.zw;
    r9.xyz = t2.Sample(s2_s, r8.xy).xyz;
    r8.xyz = t2.Sample(s2_s, r8.zw).xyz;
    r9.xyz = r9.xyz + -r8.xyz;
    r8.xyz = cb0[76].zzz * r9.xyz + r8.xyz;
  } else {
    r9.x = 1 + -r3.w;
    r9.y = r6.y;
    r7.xyz = t2.Sample(s2_s, r9.yx).xyz;
    r9.z = 0;
    r8.xyz = t2.Sample(s2_s, r9.zx).xyz;
  }
  r4.w = cmp(r0.x < 1);
  if (r4.w != 0) {
    if (r4.y != 0) {
      r3.y = r3.y * 0.100000001 + 0.550000012;
      r9.yw = float2(1,1) + -r3.wy;
      r9.xz = float2(0,0);
      r6.yzw = t2.Sample(s2_s, r9.xy).xyz;
      r9.xyz = t2.Sample(s2_s, r9.zw).xyz;
      r6.yzw = -r9.xyz + r6.yzw;
      r6.yzw = cb0[76].zzz * r6.yzw + r9.xyz;
    } else {
      r9.y = 1 + -r3.w;
      r9.x = 0;
      r6.yzw = t2.Sample(s2_s, r9.xy).xyz;
    }
  } else {
    r6.yzw = float3(0,0,0);
  }
  r3.y = cmp(0 != r6.x);
  r7.xyz = r7.xyz * r2.xyz;
  r9.xyz = cb0[75].xxx * r2.xyz;
  r7.xyz = r3.yyy ? r7.xyz : r9.xyz;
  r9.xyz = r6.yzw * r2.xyz;
  r6.xyz = -r2.xyz * r6.yzw + r7.xyz;
  r6.xyz = r0.xxx * r6.xyz + r9.xyz;
  r6.xyz = r4.www ? r6.xyz : r7.xyz;
  r3.x = cmp(r3.x == 1.000000);
  r3.y = r5.z ? cb0[58].w : cb0[62].w;
  r3.w = r5.z ? cb0[59].x : cb0[63].x;
  r3.y = r5.y ? cb0[54].w : r3.y;
  r3.w = r5.y ? cb0[55].x : r3.w;
  r7.x = r5.x ? cb0[50].w : r3.y;
  r7.y = r5.x ? cb0[51].x : r3.w;
  r3.yw = r3.xx ? cb0[38].xy : r7.xy;
  r1.x = dot(v3.xyz, r1.xzw);
  r1.x = max(0.00100000005, r1.x);
  r1.x = log2(r1.x);
  r1.x = r3.y * r1.x;
  r1.x = exp2(r1.x);
  r1.z = 1 + -r4.z;
  r1.x = cmp(r1.z < r1.x);
  r7.xyz = cb0[37].yzw * r3.www;
  r4.xyz = r7.xyz * r4.xxx;
  r4.xyz = r1.xxx ? r4.xyz : 0;
  r4.xyz = cb0[75].xxx * r4.xyz;
  r1.xzw = r1.xxx ? r4.xyz : 0;
  r4.xyz = cb0[43].xyz * r2.xyz;
  r4.xyz = cb0[42].zzz * r4.xyz;
  r7.xyz = cb0[42].www * r4.xyz;
  r9.xyz = cb0[49].xxx * r4.xyz;
  r10.xyz = cb0[52].www * r4.xyz;
  r11.xyz = cb0[56].www * r4.xyz;
  r12.xyz = cb0[60].www * r4.xyz;
  r4.xyz = r5.www ? r12.xyz : r4.xyz;
  r4.xyz = r5.zzz ? r11.xyz : r4.xyz;
  r4.xyz = r5.yyy ? r10.xyz : r4.xyz;
  r4.xyz = r5.xxx ? r9.xyz : r4.xyz;
  r3.xyw = r3.xxx ? r7.xyz : r4.xyz;
  r4.xyz = r1.xzw * r0.xxx;
  r1.xzw = r4.www ? r4.xyz : r1.xzw;
  r1.xzw = r6.xyz + r1.xzw;
  r3.xyw = r3.xyw + -r1.xzw;
  r3.xyw = r2.www * r3.xyw + r1.xzw;
  r1.xzw = r3.zzz ? r3.xyw : r1.xzw;
  r0.x = -0.699999988 + cb0[88].x;
  r0.x = saturate(r0.x * -3.33333325 + 1);
  r3.x = dot(v3.xyz, v3.xyz);
  r3.x = rsqrt(r3.x);
  r3.xyz = v3.xyz * r3.xxx;
  r0.y = dot(r3.xyz, r0.yzw);
  r0.y = 1 + -r0.y;
  r0.y = max(9.99999975e-05, r0.y);
  r0.x = 5 * r0.x;
  r0.y = log2(r0.y);
  r0.x = r0.x * r0.y;
  r0.x = exp2(r0.x);
  r0.xyz = cb0[87].xyz * r0.xxx;
  r3.xyz = cb0[88].xxx * r0.xyz;
  r0.xyz = r0.xyz * cb0[88].xxx + r1.xzw;
  r1.xzw = r2.xyz * r8.xyz + r3.xyz;
  r2.x = max(r0.y, r0.z);
  r3.w = max(r2.x, r0.x);
  r2.x = cmp(1 < r3.w);
  r3.xyz = r0.xyz / r3.www;
  r0.w = 1;
  r0.xyzw = r2.xxxx ? r3.xyzw : r0.xyzw;
  r2.xyz = r1.xzw + -r0.xyz;
  r2.xyz = cb0[85].xxx * r2.xyz + r0.xyz;
  r1.xyz = r1.yyy ? r2.xyz : r1.xzw;
  r0.w = saturate(0.0500000007 * r0.w);
  o1.w = sqrt(r0.w);
  o0.xyz = v3.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  r0.w = cmp(0 != cb0[22].x);
  r1.w = 0.00392156886 * cb0[22].y;
  o2.z = r0.w ? r1.w : r1.z;
  o0.w = r5.x ? 0.333000 : 0;
  o1.xyz = r0.xyz;
  o2.xy = r1.xy;
  o2.w = r2.w;
  o3.x = 0.0156862754;
  o4.x = r2.w;
  o5.x = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Wed Sep 27 22:55:10 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// COLOR                    0   xyzw        1     NONE   float   xy w
// TEXCOORD                 0   xyzw        2     NONE   float   xy
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
// TEXCOORD                 2   xyzw        4     NONE   float   xy w
// TEXCOORD                 3   xyz         5     NONE   float   xyz
// TEXCOORD                 4   xy          6     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   x           3   TARGET   float   x
// SV_Target                4   x           4   TARGET   float   x
// SV_Target                5   x           5   TARGET   float   x
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer CB0[89], immediateIndexed
dcl_constantbuffer CB1[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyw
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.x
dcl_output o4.x
dcl_output o5.x
dcl_temps 13
ne r0.xy, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[64].wxww
add r0.z, v1.w, l(-0.010000)
lt r0.z, r0.z, l(0.000000)
and r0.x, r0.x, r0.z
discard_nz r0.x
if_nz r0.y
  lt r0.x, cb0[64].y, l(0.950000)
  if_nz r0.x
    div r0.xy, v4.yxyy, v4.wwww
    mul r0.xy, r0.xyxx, cb1[7].yxyy
    mul r0.xy, r0.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000)
    ge r0.zw, r0.xxxy, -r0.xxxy
    frc r0.xy, |r0.xyxx|
    movc r0.xy, r0.zwzz, r0.xyxx, -r0.xyxx
    mul r0.xy, r0.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000)
    ftou r0.xy, r0.xyxx
    dp4 r1.x, cb0[8].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.y, cb0[9].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.z, cb0[10].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.w, cb0[11].xyzw, icb[r0.y + 0].xyzw
    dp4 r0.x, r1.xyzw, icb[r0.x + 0].xyzw
    mad r0.x, cb0[64].y, l(17.000000), -r0.x
    add r0.x, r0.x, l(-0.010000)
    lt r0.x, r0.x, l(0.000000)
    discard_nz r0.x
  endif
endif
dp3 r0.x, v5.xyzx, v5.xyzx
rsq r0.x, r0.x
mul r0.yzw, r0.xxxx, v5.xxyz
lt r1.xy, l(0.000000, 0.500000, 0.000000, 0.000000), cb0[83].wwww
ne r1.z, l(0.000000, 0.000000, 0.000000, 0.000000), v6.y
movc r2.xyz, r1.zzzz, cb0[84].xyzx, cb0[83].xyzx
movc r1.xzw, r1.xxxx, r2.xxyz, cb0[79].xxyz
mad r1.xzw, v5.xxyz, r0.xxxx, r1.xxzw
dp3 r0.x, r1.xzwx, r1.xzwx
rsq r0.x, r0.x
mul r1.xzw, r0.xxxx, r1.xxzw
add r0.x, cb0[64].z, l(-1.000000)
sample_b_indexable(texture2d)(float,float,float,float) r2.xyzw, v2.xyxx, t0.xyzw, s0, r0.x
eq r3.xyz, cb0[26].xxxx, l(3.000000, 1.000000, 2.000000, 0.000000)
mul r3.w, r2.w, cb0[38].z
add r4.xyz, -r2.xyzx, cb0[39].xyzx
mad r4.xyz, r3.wwww, r4.xyzx, r2.xyzx
movc r2.xyz, r3.xxxx, r4.xyzx, r2.xyzx
add r3.x, r2.w, -cb0[26].y
lt r3.x, r3.x, l(0.000000)
and r3.x, r3.y, r3.x
discard_nz r3.x
sample_b_indexable(texture2d)(float,float,float,float) r4.xyzw, v2.xyxx, t1.xyzw, s1, r0.x
ne r3.xy, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[33].xyxx
movc r0.x, r3.x, r4.y, l(0.500000)
ne r3.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[48].x
ge r5.xyzw, r4.wwww, l(0.800000, 0.400000, 0.200000, 0.600000)
and r3.x, r3.x, r5.x
movc r3.x, r3.x, l(2.000000), l(1.000000)
ne r3.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[51].w
and r3.w, r5.y, r3.w
lt r6.xyz, r4.wwww, l(0.600000, 0.400000, 0.800000, 0.000000)
and r3.w, r3.w, r6.x
movc r3.x, r3.w, l(3.000000), r3.x
ne r3.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[55].w
and r3.w, r5.z, r3.w
and r3.w, r6.y, r3.w
movc r3.x, r3.w, l(4.000000), r3.x
ne r3.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[59].w
and r3.w, r5.w, r3.w
and r3.w, r6.z, r3.w
movc r3.x, r3.w, l(5.000000), r3.x
eq r5.xyzw, r3.xxxx, l(2.000000, 3.000000, 4.000000, 5.000000)
movc r6.xyz, r5.xxxx, cb0[48].yzwy, cb0[23].xyzx
movc r6.xyz, r5.yyyy, cb0[52].xyzx, r6.xyzx
movc r6.xyz, r5.zzzz, cb0[56].xyzx, r6.xyzx
movc r6.xyz, r5.wwww, cb0[60].xyzx, r6.xyzx
mul r2.xyz, r2.xyzx, r6.xyzx
lt r3.w, l(0.010000), r2.w
and r3.z, r3.w, r3.z
and r2.w, r2.w, r3.z
mul r3.w, r0.x, v1.x
movc r0.x, r3.y, r3.w, r0.x
lt r3.y, r0.x, l(0.050000)
lt r3.w, l(0.950000), r0.x
add r0.x, r0.x, v3.w
mul r0.x, r0.x, l(0.500000)
movc r0.x, r3.w, l(1.000000), r0.x
movc r0.x, r3.y, l(0), r0.x
lt r3.y, r0.x, cb0[33].z
add r0.x, -r0.x, cb0[33].z
div r0.x, r0.x, cb0[33].z
ne r3.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[36].y
add r4.y, v1.y, v1.y
max r4.y, r4.y, l(0.010000)
mul r4.y, r4.y, cb0[36].x
movc r3.w, r3.w, r4.y, cb0[36].x
div r0.x, r0.x, r3.w
min r0.x, r0.x, l(1.000000)
add r0.x, -r0.x, l(1.000000)
movc r6.y, r3.y, r0.x, l(1.000000)
and r6.x, r3.y, l(0x3f800000)
lt r0.x, l(0.000010), v6.x
movc r6.xy, r0.xxxx, l(1.000000,0,0,0), r6.xyxx
lt r0.x, l(0.500000), cb0[79].w
add r3.y, cb0[78].w, cb0[78].w
min r3.y, r3.y, l(1.000000)
movc r0.x, r0.x, r3.y, l(1.000000)
add r3.y, r3.x, l(-1.000000)
mad r3.w, r3.y, l(0.100000), l(0.050000)
ne r4.y, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[34].w
if_nz r4.y
  mad r4.w, r3.y, l(0.100000), l(0.550000)
  add r6.z, -r3.w, l(1.000000)
  add r6.w, -r4.w, l(1.000000)
  sample_indexable(texture2d)(float,float,float,float) r7.xyz, r6.yzyy, t2.xyzw, s2
  sample_indexable(texture2d)(float,float,float,float) r8.xyz, r6.ywyy, t2.xyzw, s2
  add r7.xyz, r7.xyzx, -r8.xyzx
  mad r7.xyz, cb0[76].zzzz, r7.xyzx, r8.xyzx
  mov r8.xz, l(0,0,0,0)
  mov r8.yw, r6.zzzw
  sample_indexable(texture2d)(float,float,float,float) r9.xyz, r8.xyxx, t2.xyzw, s2
  sample_indexable(texture2d)(float,float,float,float) r8.xyz, r8.zwzz, t2.xyzw, s2
  add r9.xyz, -r8.xyzx, r9.xyzx
  mad r8.xyz, cb0[76].zzzz, r9.xyzx, r8.xyzx
else
  add r9.x, -r3.w, l(1.000000)
  mov r9.y, r6.y
  sample_indexable(texture2d)(float,float,float,float) r7.xyz, r9.yxyy, t2.xyzw, s2
  mov r9.z, l(0)
  sample_indexable(texture2d)(float,float,float,float) r8.xyz, r9.zxzz, t2.xyzw, s2
endif
lt r4.w, r0.x, l(1.000000)
if_nz r4.w
  if_nz r4.y
    mad r3.y, r3.y, l(0.100000), l(0.550000)
    add r9.yw, -r3.wwwy, l(0.000000, 1.000000, 0.000000, 1.000000)
    mov r9.xz, l(0,0,0,0)
    sample_indexable(texture2d)(float,float,float,float) r6.yzw, r9.xyxx, t2.wxyz, s2
    sample_indexable(texture2d)(float,float,float,float) r9.xyz, r9.zwzz, t2.xyzw, s2
    add r6.yzw, r6.yyzw, -r9.xxyz
    mad r6.yzw, cb0[76].zzzz, r6.yyzw, r9.xxyz
  else
    add r9.y, -r3.w, l(1.000000)
    mov r9.x, l(0)
    sample_indexable(texture2d)(float,float,float,float) r6.yzw, r9.xyxx, t2.wxyz, s2
  endif
else
  mov r6.yzw, l(0,0,0,0)
endif
ne r3.y, l(0.000000, 0.000000, 0.000000, 0.000000), r6.x
mul r7.xyz, r2.xyzx, r7.xyzx
mul r9.xyz, r2.xyzx, cb0[75].xxxx
movc r7.xyz, r3.yyyy, r7.xyzx, r9.xyzx
mul r9.xyz, r2.xyzx, r6.yzwy
mad r6.xyz, -r2.xyzx, r6.yzwy, r7.xyzx
mad r6.xyz, r0.xxxx, r6.xyzx, r9.xyzx
movc r6.xyz, r4.wwww, r6.xyzx, r7.xyzx
eq r3.x, r3.x, l(1.000000)
movc r3.y, r5.z, cb0[58].w, cb0[62].w
movc r3.w, r5.z, cb0[59].x, cb0[63].x
movc r3.y, r5.y, cb0[54].w, r3.y
movc r3.w, r5.y, cb0[55].x, r3.w
movc r7.x, r5.x, cb0[50].w, r3.y
movc r7.y, r5.x, cb0[51].x, r3.w
movc r3.yw, r3.xxxx, cb0[38].xxxy, r7.xxxy
dp3 r1.x, v3.xyzx, r1.xzwx
max r1.x, r1.x, l(0.001000)
log r1.x, r1.x
mul r1.x, r1.x, r3.y
exp r1.x, r1.x
add r1.z, -r4.z, l(1.000000)
lt r1.x, r1.z, r1.x
mul r7.xyz, r3.wwww, cb0[37].yzwy
mul r4.xyz, r4.xxxx, r7.xyzx
and r4.xyz, r1.xxxx, r4.xyzx
mul r4.xyz, r4.xyzx, cb0[75].xxxx
and r1.xzw, r1.xxxx, r4.xxyz
mul r4.xyz, r2.xyzx, cb0[43].xyzx
mul r4.xyz, r4.xyzx, cb0[42].zzzz
mul r7.xyz, r4.xyzx, cb0[42].wwww
mul r9.xyz, r4.xyzx, cb0[49].xxxx
mul r10.xyz, r4.xyzx, cb0[52].wwww
mul r11.xyz, r4.xyzx, cb0[56].wwww
mul r12.xyz, r4.xyzx, cb0[60].wwww
movc r4.xyz, r5.wwww, r12.xyzx, r4.xyzx
movc r4.xyz, r5.zzzz, r11.xyzx, r4.xyzx
movc r4.xyz, r5.yyyy, r10.xyzx, r4.xyzx
movc r4.xyz, r5.xxxx, r9.xyzx, r4.xyzx
movc r3.xyw, r3.xxxx, r7.xyxz, r4.xyxz
mul r4.xyz, r0.xxxx, r1.xzwx
movc r1.xzw, r4.wwww, r4.xxyz, r1.xxzw
add r1.xzw, r1.xxzw, r6.xxyz
add r3.xyw, -r1.xzxw, r3.xyxw
mad r3.xyw, r2.wwww, r3.xyxw, r1.xzxw
movc r1.xzw, r3.zzzz, r3.xxyw, r1.xxzw
add r0.x, cb0[88].x, l(-0.700000)
mad_sat r0.x, r0.x, l(-3.33333325), l(1.000000)
dp3 r3.x, v3.xyzx, v3.xyzx
rsq r3.x, r3.x
mul r3.xyz, r3.xxxx, v3.xyzx
dp3 r0.y, r3.xyzx, r0.yzwy
add r0.y, -r0.y, l(1.000000)
max r0.y, r0.y, l(0.000100)
mul r0.x, r0.x, l(5.000000)
log r0.y, r0.y
mul r0.x, r0.y, r0.x
exp r0.x, r0.x
mul r0.xyz, r0.xxxx, cb0[87].xyzx
mul r3.xyz, r0.xyzx, cb0[88].xxxx
mad r0.xyz, r0.xyzx, cb0[88].xxxx, r1.xzwx
mad r1.xzw, r2.xxyz, r8.xxyz, r3.xxyz
max r2.x, r0.z, r0.y
max r3.w, r0.x, r2.x
lt r2.x, l(1.000000), r3.w
div r3.xyz, r0.xyzx, r3.wwww
mov r0.w, l(1.000000)
movc r0.xyzw, r2.xxxx, r3.xyzw, r0.xyzw
add r2.xyz, -r0.xyzx, r1.xzwx
mad r2.xyz, cb0[85].xxxx, r2.xyzx, r0.xyzx
movc r1.xyz, r1.yyyy, r2.xyzx, r1.xzwx
mul_sat r0.w, r0.w, l(0.050000)
sqrt o1.w, r0.w
mad o0.xyz, v3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[22].x
mul r1.w, cb0[22].y, l(0.00392156886)
movc o2.z, r0.w, r1.w, r1.z
and o0.w, r5.x, l(0x3eaa7efa)
mov o1.xyz, r0.xyzx
mov o2.xy, r1.xyxx
mov o2.w, r2.w
mov o3.x, l(0.0156862754)
mov o4.x, r2.w
mov o5.x, l(0)
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
