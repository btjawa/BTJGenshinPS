// ---- Created with 3Dmigoto v1.3.16 on Thu Sep 28 00:03:37 2023
Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s6_s : register(s6);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[17];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[90];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD3,
  float2 v6 : TEXCOORD4,
  float2 w6 : TEXCOORD6,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float o3 : SV_Target3,
  out float o4 : SV_Target4,
  out float o5 : SV_Target5)
{
  const float4 icb[] = { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = cmp(float2(0,0) != cb0[64].wx);
  r0.z = -0.00999999978 + v1.w;
  r0.z = cmp(r0.z < 0);
  r0.x = r0.x ? r0.z : 0;
  r0.xyz = t0.Sample(s2_s, v2.xy).xyz;
  r0.w = 1 + -cb0[29].y;
  r1.z = max(0.00100000005, r0.w);
  r1.xy = r0.xy * float2(2,2) + float2(-1,-1);
  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyw = r1.xyz * r0.xxx;
  r1.xyz = ddx_coarse(v5.yzx);
  r2.xyz = ddy_coarse(v5.zxy);
  r3.xy = ddx_coarse(v2.xy);
  r3.zw = ddy_coarse(v2.xy);
  r4.xyz = v3.yzx * r2.xyz;
  r2.xyz = r2.zxy * v3.zxy + -r4.xyz;
  r4.xyz = v3.zxy * r1.xyz;
  r1.xyz = v3.yzx * r1.yzx + -r4.xyz;
  r4.xyz = r1.xyz * r3.zzz;
  r4.xyz = r2.xyz * r3.xxx + r4.xyz;
  r1.xyz = r1.xyz * r3.www;
  r1.xyz = r2.xyz * r3.yyy + r1.xyz;
  r1.w = dot(r4.xyz, r4.xyz);
  r2.x = dot(r1.xyz, r1.xyz);
  r1.w = max(r2.x, r1.w);
  r1.w = sqrt(r1.w);
  r1.w = 1 / r1.w;
  r2.xyz = r4.xyz * r1.www;
  r2.w = dot(r2.xyz, r2.xyz);
  r2.w = rsqrt(r2.w);
  r2.xyz = r2.xyz * r2.www;
  r1.xyz = r1.xyz * r1.www;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r1.xyz = r1.xyz * r1.www;
  r1.w = cmp(0.99000001 >= r0.w);
  r1.xyz = r1.xyz * r0.yyy;
  r1.xyz = r0.xxx * r2.xyz + r1.xyz;
  r0.xyw = r0.www * v3.xyz + r1.xyz;
  r1.x = dot(r0.xyw, r0.xyw);
  r1.x = rsqrt(r1.x);
  r0.xyw = r1.xxx * r0.xyw;
  r0.xyw = r1.www ? r0.xyw : v3.xyz;
  r1.xy = cmp(float2(0,0.5) < cb0[83].ww);
  r1.z = cmp(0 != v6.y);
  r2.xyz = r1.zzz ? cb0[84].xyz : cb0[83].xyz;
  r1.xzw = r1.xxx ? r2.xyz : cb0[79].xyz;
  r2.x = dot(r0.xyw, r1.xzw);
  r2.x = r2.x * 0.497500002 + 0.5;
  r2.y = dot(v5.xyz, v5.xyz);
  r2.y = rsqrt(r2.y);
  r3.xyz = v5.xyz * r2.yyy;
  r1.xzw = v5.xyz * r2.yyy + r1.xzw;
  r2.y = dot(r1.xzw, r1.xzw);
  r2.y = rsqrt(r2.y);
  r1.xzw = r2.yyy * r1.xzw;
  r2.y = -1 + cb0[64].z;
  r4.xyzw = t1.SampleBias(s0_s, v2.xy, r2.y).xyzw;
  r2.z = v0.z / v0.w;
  r2.z = cb1[8].z * r2.z + cb1[8].w;
  r2.z = 1 / r2.z;
  r2.w = cb0[30].x * r2.z + cb0[29].z;
  r3.w = min(0.99000001, cb0[30].y);
  r2.w = min(r3.w, r2.w);
  r2.z = cmp(r2.z >= cb0[30].z);
  r2.z = r2.z ? 1.000000 : 0;
  r3.w = cb0[29].w * r2.z;
  r2.w = 1 + -r2.w;
  r0.z = -r2.w + r0.z;
  r0.z = cb0[29].w * r2.z + r0.z;
  r2.z = r3.w + r3.w;
  r0.z = saturate(r0.z / r2.z);
  r5.xyz = cb0[31].xyz * r4.xyz + -r4.xyz;
  r4.xyz = r0.zzz * r5.xyz + r4.xyz;
  r5.xyz = cmp(cb0[26].xxx == float3(3,1,2));
  r0.z = cb0[38].z * r4.w;
  r6.xyz = cb0[39].xyz + -r4.xyz;
  r6.xyz = r0.zzz * r6.xyz + r4.xyz;
  r4.xyz = r5.xxx ? r6.xyz : r4.xyz;
  r0.z = -cb0[26].y + r4.w;
  r0.z = cmp(r0.z < 0);
  r0.z = r5.y ? r0.z : 0;
  if (r0.z != 0) discard;
  r2.yzw = t2.SampleBias(s3_s, v2.xy, r2.y).xyz;
  r5.xy = cmp(float2(0,0) != cb0[33].xy);
  r6.xyzw = t3.Sample(s1_s, w6.xy).xyzw;
  r0.z = cb0[48].x * r6.w;
  r3.w = cb0[51].w * r6.x;
  r5.w = cb0[55].w * r6.y;
  r6.x = cb0[59].w * r6.z;
  r6.yzw = cb0[48].yzw + -cb0[23].xyz;
  r6.yzw = r0.zzz * r6.yzw + cb0[23].xyz;
  r7.xyz = cb0[52].xyz + -r6.yzw;
  r6.yzw = r3.www * r7.xyz + r6.yzw;
  r7.xyz = cb0[56].xyz + -r6.yzw;
  r6.yzw = r5.www * r7.xyz + r6.yzw;
  r7.xyz = cb0[60].xyz + -r6.yzw;
  r6.xyz = r6.xxx * r7.xyz + r6.yzw;
  r4.xyz = r6.xyz * r4.xyz;
  r0.z = cmp(0.00999999978 < r4.w);
  r0.z = r0.z ? r5.z : 0;
  r3.w = r0.z ? r4.w : 0;
  r2.z = -0.5 + r2.z;
  r2.z = r5.x ? r2.z : 0;
  r2.z = dot(r2.zz, abs(r2.zz));
  r2.z = 0.5 + r2.z;
  r4.w = v1.x * r2.z;
  r2.z = r5.y ? r4.w : r2.z;
  r4.w = cmp(r2.z < 0.0500000007);
  r5.x = cmp(0.949999988 < r2.z);
  r2.x = r2.x + r2.z;
  r2.x = 0.5 * r2.x;
  r2.x = r5.x ? 1 : r2.x;
  r2.x = r4.w ? 0 : r2.x;
  r2.z = cmp(r2.x < cb0[33].z);
  r2.x = cb0[33].z + -r2.x;
  r5.y = r2.x / cb0[33].z;
  r2.x = cmp(0 != cb0[36].y);
  r4.w = v1.y + v1.y;
  r4.w = max(0.00999999978, r4.w);
  r4.w = cb0[36].x * r4.w;
  r2.x = r2.x ? r4.w : cb0[36].x;
  r2.x = r5.y / r2.x;
  r2.x = min(1, r2.x);
  r5.z = 1 + -r2.x;
  r5.yz = r2.zz ? r5.yz : float2(0,1);
  r5.x = r2.z ? 1.000000 : 0;
  r2.x = cmp(9.99999975e-06 < v6.x);
  r6.xy = r2.xx ? float2(1,0) : r5.xz;
  r2.x = cmp(0.5 < cb0[79].w);
  r2.z = cb0[78].w + cb0[78].w;
  r2.z = min(1, r2.z);
  r2.x = r2.x ? r2.z : 1;
  r2.z = cmp(0.899999976 < r2.y);
  if (r2.z != 0) {
    r5.xz = cb2[15].xy * r0.yy;
    r5.xz = cb2[14].xy * r0.xx + r5.xz;
    r7.yz = cb2[16].xy * r0.ww + r5.xz;
    r7.x = cb0[67].y * r7.y;
    r5.xz = r7.xz * float2(0.5,0.5) + float2(0.5,0.5);
    r2.z = t4.Sample(s5_s, r5.xz).x;
    r2.z = saturate(cb0[67].x * r2.z);
    r5.xzw = -cb0[69].xyz + cb0[68].xyz;
    r5.xzw = r2.zzz * r5.xzw + cb0[69].xyz;
    r5.xzw = r5.xzw * r4.xyz;
    r2.z = dot(r0.xyw, r1.xzw);
    r2.z = max(0.00100000005, r2.z);
    r2.z = log2(r2.z);
    r2.z = cb0[70].w * r2.z;
    r2.z = exp2(r2.z);
    r7.x = saturate(cb0[71].w * r2.z);
    r2.z = cmp(cb0[72].z < r7.x);
    if (r2.z != 0) {
      r8.xyz = cb0[73].xyz;
    } else {
      r2.z = cmp(0 != cb0[72].y);
      if (r2.z != 0) {
        r7.y = 0.5;
        r7.yzw = t5.Sample(s6_s, r7.xy).xyz;
        r8.xyz = r7.yzw * r2.www;
      } else {
        r7.xyz = cb0[71].xyz * r7.xxx;
        r8.xyz = r7.xyz * r2.www;
      }
    }
    r2.z = cmp(0 != v6.x);
    r7.xyz = cb0[72].xxx * r8.xyz;
    r7.xyz = r2.zzz ? r7.xyz : r8.xyz;
    r2.z = cmp(0 != cb0[36].z);
    r8.xyz = float3(-1,-1,-1) + cb0[70].xyz;
    r8.xyz = r5.yyy * r8.xyz + float3(1,1,1);
    r8.xyz = r2.zzz ? r8.xyz : cb0[70].xyz;
    r9.xyz = r8.xyz * r5.xzw;
    r2.z = cmp(0 != r6.x);
    r10.xyz = cb0[75].xxx * r5.xzw;
    r10.xyz = r2.zzz ? r9.xyz : r10.xyz;
    r2.z = cmp(r2.x < 1);
    r5.xyz = -r5.xzw * r8.xyz + r10.xyz;
    r5.xyz = r2.xxx * r5.xyz + r9.xyz;
    r5.xyz = r2.zzz ? r5.xyz : r10.xyz;
    r7.xyz = cb0[75].xxx * r7.xyz;
  } else {
    r2.z = cmp(0 != cb0[34].w);
    if (r2.z != 0) {
      r6.zw = float2(0.949999988,0.449999988);
      r8.xyz = t6.Sample(s4_s, r6.yz).xyz;
      r10.xyz = t6.Sample(s4_s, r6.yw).xyz;
      r8.xyz = -r10.xyz + r8.xyz;
      r8.xyz = cb0[76].zzz * r8.xyz + r10.xyz;
      r10.xyz = t6.Sample(s4_s, float2(0,0.949999988)).xyz;
      r11.xyz = t6.Sample(s4_s, float2(0,0.449999988)).xyz;
      r10.xyz = -r11.xyz + r10.xyz;
      r10.xyz = cb0[76].zzz * r10.xyz + r11.xyz;
    } else {
      r11.x = r6.y;
      r11.y = 0.949999988;
      r8.xyz = t6.Sample(s4_s, r11.xy).xyz;
      r10.xyz = t6.Sample(s4_s, float2(0,0.949999988)).xyz;
    }
    r4.w = cmp(r2.x < 1);
    if (r4.w != 0) {
      if (r2.z != 0) {
        r6.yzw = t6.Sample(s4_s, float2(0,0.949999988)).xyz;
        r11.xyz = t6.Sample(s4_s, float2(0,0.449999988)).xyz;
        r6.yzw = -r11.xyz + r6.yzw;
        r6.yzw = cb0[76].zzz * r6.yzw + r11.xyz;
      } else {
        r6.yzw = t6.Sample(s4_s, float2(0,0.949999988)).xyz;
      }
    } else {
      r6.yzw = float3(0,0,0);
    }
    r9.xyz = r10.xyz * r4.xyz;
    r2.z = cmp(0 != r6.x);
    r8.xyz = r8.xyz * r4.xyz;
    r10.xyz = cb0[75].xxx * r4.xyz;
    r8.xyz = r2.zzz ? r8.xyz : r10.xyz;
    r10.xyz = r6.yzw * r4.xyz;
    r6.xyz = -r4.xyz * r6.yzw + r8.xyz;
    r6.xyz = r2.xxx * r6.xyz + r10.xyz;
    r5.xyz = r4.www ? r6.xyz : r8.xyz;
    r1.x = dot(r0.xyw, r1.xzw);
    r1.x = max(0.00100000005, r1.x);
    r1.x = log2(r1.x);
    r1.x = cb0[38].x * r1.x;
    r1.x = exp2(r1.x);
    r1.z = 1 + -r2.w;
    r1.x = cmp(r1.z < r1.x);
    r6.xyz = cb0[38].yyy * cb0[37].yzw;
    r2.yzw = r6.xyz * r2.yyy;
    r2.yzw = r1.xxx ? r2.yzw : 0;
    r2.yzw = cb0[75].xxx * r2.yzw;
    r7.xyz = r1.xxx ? r2.yzw : 0;
  }
  r1.xzw = cb0[43].xyz * r4.xyz;
  r2.y = cmp(r2.x < 1);
  r2.xzw = r7.xyz * r2.xxx;
  r2.xyz = r2.yyy ? r2.xzw : r7.xyz;
  r2.xyz = r5.xyz + r2.xyz;
  r1.xzw = r1.xzw * cb0[42].zzz + -r2.xyz;
  r1.xzw = r3.www * r1.xzw + r2.xyz;
  r1.xzw = r0.zzz ? r1.xzw : r2.xyz;
  r0.z = dot(r0.xyw, r0.xyw);
  r0.z = rsqrt(r0.z);
  r2.xyz = r0.xyw * r0.zzz;
  r0.z = saturate(dot(r3.xyz, r2.xyz));
  r0.z = 1 + -r0.z;
  r0.z = max(9.99999975e-05, r0.z);
  r0.z = log2(r0.z);
  r0.z = cb0[89].x * r0.z;
  r0.z = exp2(r0.z);
  r2.xyz = max(cb0[88].xyz, cb0[87].xyz);
  r2.xyz = r2.xyz * r0.zzz;
  r4.xyz = r2.xyz * cb0[89].yyy + r1.xzw;
  r0.z = 1 + -r3.w;
  r0.z = cb0[89].z * r0.z + r3.w;
  r1.xzw = r2.xyz * cb0[89].yyy + r9.xyz;
  r2.x = max(r4.y, r4.z);
  r2.w = max(r4.x, r2.x);
  r3.x = cmp(1 < r2.w);
  r2.xyz = r4.xyz / r2.www;
  r4.w = 1;
  r2.xyzw = r3.xxxx ? r2.xyzw : r4.xyzw;
  r3.xyz = -r2.xyz + r1.xzw;
  r3.xyz = cb0[85].xxx * r3.xyz + r2.xyz;
  r1.xyz = r1.yyy ? r3.xyz : r1.xzw;
  r1.w = saturate(0.0500000007 * r2.w);
  o1.w = sqrt(r1.w);
  o0.xyz = r0.xyw * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  r0.x = cmp(0 != cb0[22].x);
  r0.y = 0.00392156886 * cb0[22].y;
  o2.z = r0.x ? r0.y : r1.z;
  o0.w = 0;
  o1.xyz = r2.xyz;
  o2.xy = r1.xy;
  o2.w = r0.z;
  o3.x = 0.0156862754;
  o4.x = r0.z;
  o5.x = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Sep 28 00:03:37 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float     zw
// COLOR                    0   xyzw        1     NONE   float   xy w
// TEXCOORD                 0   xyzw        2     NONE   float   xy
// TEXCOORD                 1   xyzw        3     NONE   float   xyz
// TEXCOORD                 2   xyzw        4     NONE   float   xy w
// TEXCOORD                 3   xyz         5     NONE   float   xyz
// TEXCOORD                 4   xy          6     NONE   float   xy
// TEXCOORD                 6     zw        6     NONE   float     zw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   x           3   TARGET   float   x
// SV_Target                4   x           4   TARGET   float   x
// SV_Target                5   x           5   TARGET   float   x
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer CB0[90], immediateIndexed
dcl_constantbuffer CB1[9], immediateIndexed
dcl_constantbuffer CB2[17], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps_siv linear noperspective v0.zw, position
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyw
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xy
dcl_input_ps linear v6.zw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.x
dcl_output o4.x
dcl_output o5.x
dcl_temps 12
ne r0.xy, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[64].wxww
add r0.z, v1.w, l(-0.010000)
lt r0.z, r0.z, l(0.000000)
and r0.x, r0.x, r0.z
discard_nz r0.x
if_nz r0.y
  lt r0.x, cb0[64].y, l(0.950000)
  if_nz r0.x
    div r0.xy, v4.yxyy, v4.wwww
    mul r0.xy, r0.xyxx, cb1[7].yxyy
    mul r0.xy, r0.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000)
    ge r0.zw, r0.xxxy, -r0.xxxy
    frc r0.xy, |r0.xyxx|
    movc r0.xy, r0.zwzz, r0.xyxx, -r0.xyxx
    mul r0.xy, r0.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000)
    ftou r0.xy, r0.xyxx
    dp4 r1.x, cb0[8].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.y, cb0[9].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.z, cb0[10].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.w, cb0[11].xyzw, icb[r0.y + 0].xyzw
    dp4 r0.x, r1.xyzw, icb[r0.x + 0].xyzw
    mad r0.x, cb0[64].y, l(17.000000), -r0.x
    add r0.x, r0.x, l(-0.010000)
    lt r0.x, r0.x, l(0.000000)
    discard_nz r0.x
  endif
endif
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v2.xyxx, t0.xyzw, s2
add r0.w, -cb0[29].y, l(1.000000)
max r1.z, r0.w, l(0.001000)
mad r1.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp3 r0.x, r1.xyzx, r1.xyzx
rsq r0.x, r0.x
mul r0.xyw, r0.xxxx, r1.xyxz
deriv_rtx_coarse r1.xyz, v5.yzxy
deriv_rty_coarse r2.xyz, v5.zxyz
deriv_rtx_coarse r3.xy, v2.xyxx
deriv_rty_coarse r3.zw, v2.xxxy
mul r4.xyz, r2.xyzx, v3.yzxy
mad r2.xyz, r2.zxyz, v3.zxyz, -r4.xyzx
mul r4.xyz, r1.xyzx, v3.zxyz
mad r1.xyz, v3.yzxy, r1.yzxy, -r4.xyzx
mul r4.xyz, r3.zzzz, r1.xyzx
mad r4.xyz, r2.xyzx, r3.xxxx, r4.xyzx
mul r1.xyz, r3.wwww, r1.xyzx
mad r1.xyz, r2.xyzx, r3.yyyy, r1.xyzx
dp3 r1.w, r4.xyzx, r4.xyzx
dp3 r2.x, r1.xyzx, r1.xyzx
max r1.w, r1.w, r2.x
sqrt r1.w, r1.w
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
mul r2.xyz, r1.wwww, r4.xyzx
dp3 r2.w, r2.xyzx, r2.xyzx
rsq r2.w, r2.w
mul r2.xyz, r2.wwww, r2.xyzx
mul r1.xyz, r1.wwww, r1.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
ge r1.w, l(0.990000), r0.w
mul r1.xyz, r0.yyyy, r1.xyzx
mad r1.xyz, r0.xxxx, r2.xyzx, r1.xyzx
mad r0.xyw, r0.wwww, v3.xyxz, r1.xyxz
dp3 r1.x, r0.xywx, r0.xywx
rsq r1.x, r1.x
mul r0.xyw, r0.xyxw, r1.xxxx
movc r0.xyw, r1.wwww, r0.xyxw, v3.xyxz
lt r1.xy, l(0.000000, 0.500000, 0.000000, 0.000000), cb0[83].wwww
ne r1.z, l(0.000000, 0.000000, 0.000000, 0.000000), v6.y
movc r2.xyz, r1.zzzz, cb0[84].xyzx, cb0[83].xyzx
movc r1.xzw, r1.xxxx, r2.xxyz, cb0[79].xxyz
dp3 r2.x, r0.xywx, r1.xzwx
mad r2.x, r2.x, l(0.497500), l(0.500000)
dp3 r2.y, v5.xyzx, v5.xyzx
rsq r2.y, r2.y
mul r3.xyz, r2.yyyy, v5.xyzx
mad r1.xzw, v5.xxyz, r2.yyyy, r1.xxzw
dp3 r2.y, r1.xzwx, r1.xzwx
rsq r2.y, r2.y
mul r1.xzw, r1.xxzw, r2.yyyy
add r2.y, cb0[64].z, l(-1.000000)
sample_b_indexable(texture2d)(float,float,float,float) r4.xyzw, v2.xyxx, t1.xyzw, s0, r2.y
div r2.z, v0.z, v0.w
mad r2.z, cb1[8].z, r2.z, cb1[8].w
div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
mad r2.w, cb0[30].x, r2.z, cb0[29].z
min r3.w, cb0[30].y, l(0.990000)
min r2.w, r2.w, r3.w
ge r2.z, r2.z, cb0[30].z
and r2.z, r2.z, l(0x3f800000)
mul r3.w, r2.z, cb0[29].w
add r2.w, -r2.w, l(1.000000)
add r0.z, r0.z, -r2.w
mad r0.z, cb0[29].w, r2.z, r0.z
add r2.z, r3.w, r3.w
div_sat r0.z, r0.z, r2.z
mad r5.xyz, cb0[31].xyzx, r4.xyzx, -r4.xyzx
mad r4.xyz, r0.zzzz, r5.xyzx, r4.xyzx
eq r5.xyz, cb0[26].xxxx, l(3.000000, 1.000000, 2.000000, 0.000000)
mul r0.z, r4.w, cb0[38].z
add r6.xyz, -r4.xyzx, cb0[39].xyzx
mad r6.xyz, r0.zzzz, r6.xyzx, r4.xyzx
movc r4.xyz, r5.xxxx, r6.xyzx, r4.xyzx
add r0.z, r4.w, -cb0[26].y
lt r0.z, r0.z, l(0.000000)
and r0.z, r5.y, r0.z
discard_nz r0.z
sample_b_indexable(texture2d)(float,float,float,float) r2.yzw, v2.xyxx, t2.wxyz, s3, r2.y
ne r5.xy, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[33].xyxx
sample_indexable(texture2d)(float,float,float,float) r6.xyzw, v6.zwzz, t3.xyzw, s1
mul r0.z, r6.w, cb0[48].x
mul r3.w, r6.x, cb0[51].w
mul r5.w, r6.y, cb0[55].w
mul r6.x, r6.z, cb0[59].w
add r6.yzw, -cb0[23].xxyz, cb0[48].yyzw
mad r6.yzw, r0.zzzz, r6.yyzw, cb0[23].xxyz
add r7.xyz, -r6.yzwy, cb0[52].xyzx
mad r6.yzw, r3.wwww, r7.xxyz, r6.yyzw
add r7.xyz, -r6.yzwy, cb0[56].xyzx
mad r6.yzw, r5.wwww, r7.xxyz, r6.yyzw
add r7.xyz, -r6.yzwy, cb0[60].xyzx
mad r6.xyz, r6.xxxx, r7.xyzx, r6.yzwy
mul r4.xyz, r4.xyzx, r6.xyzx
lt r0.z, l(0.010000), r4.w
and r0.z, r0.z, r5.z
and r3.w, r4.w, r0.z
add r2.z, r2.z, l(-0.500000)
and r2.z, r2.z, r5.x
dp2 r2.z, r2.zzzz, |r2.zzzz|
add r2.z, r2.z, l(0.500000)
mul r4.w, r2.z, v1.x
movc r2.z, r5.y, r4.w, r2.z
lt r4.w, r2.z, l(0.050000)
lt r5.x, l(0.950000), r2.z
add r2.x, r2.z, r2.x
mul r2.x, r2.x, l(0.500000)
movc r2.x, r5.x, l(1.000000), r2.x
movc r2.x, r4.w, l(0), r2.x
lt r2.z, r2.x, cb0[33].z
add r2.x, -r2.x, cb0[33].z
div r5.y, r2.x, cb0[33].z
ne r2.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[36].y
add r4.w, v1.y, v1.y
max r4.w, r4.w, l(0.010000)
mul r4.w, r4.w, cb0[36].x
movc r2.x, r2.x, r4.w, cb0[36].x
div r2.x, r5.y, r2.x
min r2.x, r2.x, l(1.000000)
add r5.z, -r2.x, l(1.000000)
movc r5.yz, r2.zzzz, r5.yyzy, l(0,0,1.000000,0)
and r5.x, r2.z, l(0x3f800000)
lt r2.x, l(0.000010), v6.x
movc r6.xy, r2.xxxx, l(1.000000,0,0,0), r5.xzxx
lt r2.x, l(0.500000), cb0[79].w
add r2.z, cb0[78].w, cb0[78].w
min r2.z, r2.z, l(1.000000)
movc r2.x, r2.x, r2.z, l(1.000000)
lt r2.z, l(0.900000), r2.y
if_nz r2.z
  mul r5.xz, r0.yyyy, cb2[15].xxyx
  mad r5.xz, cb2[14].xxyx, r0.xxxx, r5.xxzx
  mad r7.yz, cb2[16].xxyx, r0.wwww, r5.xxzx
  mul r7.x, r7.y, cb0[67].y
  mad r5.xz, r7.xxzx, l(0.500000, 0.000000, 0.500000, 0.000000), l(0.500000, 0.000000, 0.500000, 0.000000)
  sample_indexable(texture2d)(float,float,float,float) r2.z, r5.xzxx, t4.yzxw, s5
  mul_sat r2.z, r2.z, cb0[67].x
  add r5.xzw, cb0[68].xxyz, -cb0[69].xxyz
  mad r5.xzw, r2.zzzz, r5.xxzw, cb0[69].xxyz
  mul r5.xzw, r4.xxyz, r5.xxzw
  dp3 r2.z, r0.xywx, r1.xzwx
  max r2.z, r2.z, l(0.001000)
  log r2.z, r2.z
  mul r2.z, r2.z, cb0[70].w
  exp r2.z, r2.z
  mul_sat r7.x, r2.z, cb0[71].w
  lt r2.z, cb0[72].z, r7.x
  if_nz r2.z
    mov r8.xyz, cb0[73].xyzx
  else
    ne r2.z, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[72].y
    if_nz r2.z
      mov r7.y, l(0.500000)
      sample_indexable(texture2d)(float,float,float,float) r7.yzw, r7.xyxx, t5.wxyz, s6
      mul r8.xyz, r2.wwww, r7.yzwy
    else
      mul r7.xyz, r7.xxxx, cb0[71].xyzx
      mul r8.xyz, r2.wwww, r7.xyzx
    endif
  endif
  ne r2.z, l(0.000000, 0.000000, 0.000000, 0.000000), v6.x
  mul r7.xyz, r8.xyzx, cb0[72].xxxx
  movc r7.xyz, r2.zzzz, r7.xyzx, r8.xyzx
  ne r2.z, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[36].z
  add r8.xyz, cb0[70].xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
  mad r8.xyz, r5.yyyy, r8.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  movc r8.xyz, r2.zzzz, r8.xyzx, cb0[70].xyzx
  mul r9.xyz, r5.xzwx, r8.xyzx
  ne r2.z, l(0.000000, 0.000000, 0.000000, 0.000000), r6.x
  mul r10.xyz, r5.xzwx, cb0[75].xxxx
  movc r10.xyz, r2.zzzz, r9.xyzx, r10.xyzx
  lt r2.z, r2.x, l(1.000000)
  mad r5.xyz, -r5.xzwx, r8.xyzx, r10.xyzx
  mad r5.xyz, r2.xxxx, r5.xyzx, r9.xyzx
  movc r5.xyz, r2.zzzz, r5.xyzx, r10.xyzx
  mul r7.xyz, r7.xyzx, cb0[75].xxxx
else
  ne r2.z, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[34].w
  if_nz r2.z
    mov r6.zw, l(0,0,0.950000,0.450000)
    sample_indexable(texture2d)(float,float,float,float) r8.xyz, r6.yzyy, t6.xyzw, s4
    sample_indexable(texture2d)(float,float,float,float) r10.xyz, r6.ywyy, t6.xyzw, s4
    add r8.xyz, r8.xyzx, -r10.xyzx
    mad r8.xyz, cb0[76].zzzz, r8.xyzx, r10.xyzx
    sample_indexable(texture2d)(float,float,float,float) r10.xyz, l(0.000000, 0.950000, 0.000000, 0.000000), t6.xyzw, s4
    sample_indexable(texture2d)(float,float,float,float) r11.xyz, l(0.000000, 0.450000, 0.000000, 0.000000), t6.xyzw, s4
    add r10.xyz, r10.xyzx, -r11.xyzx
    mad r10.xyz, cb0[76].zzzz, r10.xyzx, r11.xyzx
  else
    mov r11.x, r6.y
    mov r11.y, l(0.950000)
    sample_indexable(texture2d)(float,float,float,float) r8.xyz, r11.xyxx, t6.xyzw, s4
    sample_indexable(texture2d)(float,float,float,float) r10.xyz, l(0.000000, 0.950000, 0.000000, 0.000000), t6.xyzw, s4
  endif
  lt r4.w, r2.x, l(1.000000)
  if_nz r4.w
    if_nz r2.z
      sample_indexable(texture2d)(float,float,float,float) r6.yzw, l(0.000000, 0.950000, 0.000000, 0.000000), t6.wxyz, s4
      sample_indexable(texture2d)(float,float,float,float) r11.xyz, l(0.000000, 0.450000, 0.000000, 0.000000), t6.xyzw, s4
      add r6.yzw, r6.yyzw, -r11.xxyz
      mad r6.yzw, cb0[76].zzzz, r6.yyzw, r11.xxyz
    else
      sample_indexable(texture2d)(float,float,float,float) r6.yzw, l(0.000000, 0.950000, 0.000000, 0.000000), t6.wxyz, s4
    endif
  else
    mov r6.yzw, l(0,0,0,0)
  endif
  mul r9.xyz, r4.xyzx, r10.xyzx
  ne r2.z, l(0.000000, 0.000000, 0.000000, 0.000000), r6.x
  mul r8.xyz, r4.xyzx, r8.xyzx
  mul r10.xyz, r4.xyzx, cb0[75].xxxx
  movc r8.xyz, r2.zzzz, r8.xyzx, r10.xyzx
  mul r10.xyz, r4.xyzx, r6.yzwy
  mad r6.xyz, -r4.xyzx, r6.yzwy, r8.xyzx
  mad r6.xyz, r2.xxxx, r6.xyzx, r10.xyzx
  movc r5.xyz, r4.wwww, r6.xyzx, r8.xyzx
  dp3 r1.x, r0.xywx, r1.xzwx
  max r1.x, r1.x, l(0.001000)
  log r1.x, r1.x
  mul r1.x, r1.x, cb0[38].x
  exp r1.x, r1.x
  add r1.z, -r2.w, l(1.000000)
  lt r1.x, r1.z, r1.x
  mul r6.xyz, cb0[37].yzwy, cb0[38].yyyy
  mul r2.yzw, r2.yyyy, r6.xxyz
  and r2.yzw, r1.xxxx, r2.yyzw
  mul r2.yzw, r2.yyzw, cb0[75].xxxx
  and r7.xyz, r1.xxxx, r2.yzwy
endif
mul r1.xzw, r4.xxyz, cb0[43].xxyz
lt r2.y, r2.x, l(1.000000)
mul r2.xzw, r2.xxxx, r7.xxyz
movc r2.xyz, r2.yyyy, r2.xzwx, r7.xyzx
add r2.xyz, r2.xyzx, r5.xyzx
mad r1.xzw, r1.xxzw, cb0[42].zzzz, -r2.xxyz
mad r1.xzw, r3.wwww, r1.xxzw, r2.xxyz
movc r1.xzw, r0.zzzz, r1.xxzw, r2.xxyz
dp3 r0.z, r0.xywx, r0.xywx
rsq r0.z, r0.z
mul r2.xyz, r0.zzzz, r0.xywx
dp3_sat r0.z, r3.xyzx, r2.xyzx
add r0.z, -r0.z, l(1.000000)
max r0.z, r0.z, l(0.000100)
log r0.z, r0.z
mul r0.z, r0.z, cb0[89].x
exp r0.z, r0.z
max r2.xyz, cb0[87].xyzx, cb0[88].xyzx
mul r2.xyz, r0.zzzz, r2.xyzx
mad r4.xyz, r2.xyzx, cb0[89].yyyy, r1.xzwx
add r0.z, -r3.w, l(1.000000)
mad r0.z, cb0[89].z, r0.z, r3.w
mad r1.xzw, r2.xxyz, cb0[89].yyyy, r9.xxyz
max r2.x, r4.z, r4.y
max r2.w, r2.x, r4.x
lt r3.x, l(1.000000), r2.w
div r2.xyz, r4.xyzx, r2.wwww
mov r4.w, l(1.000000)
movc r2.xyzw, r3.xxxx, r2.xyzw, r4.xyzw
add r3.xyz, r1.xzwx, -r2.xyzx
mad r3.xyz, cb0[85].xxxx, r3.xyzx, r2.xyzx
movc r1.xyz, r1.yyyy, r3.xyzx, r1.xzwx
mul_sat r1.w, r2.w, l(0.050000)
sqrt o1.w, r1.w
mad o0.xyz, r0.xywx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
ne r0.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[22].x
mul r0.y, cb0[22].y, l(0.00392156886)
movc o2.z, r0.x, r0.y, r1.z
mov o0.w, l(0)
mov o1.xyz, r2.xyzx
mov o2.xy, r1.xyxx
mov o2.w, r0.z
mov o3.x, l(0.0156862754)
mov o4.x, r0.z
mov o5.x, l(0)
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
