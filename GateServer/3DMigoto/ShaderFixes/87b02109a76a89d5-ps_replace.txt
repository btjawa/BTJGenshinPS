// ---- Created with 3Dmigoto v1.3.16 on Wed Sep 27 23:59:44 2023
Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[93];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD3,
  float4 v6 : TEXCOORD4,
  float4 v7 : TEXCOORD5,
  float4 v8 : TEXCOORD6,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float o3 : SV_Target3,
  out float o4 : SV_Target4,
  out float o5 : SV_Target5)
{
  const float4 icb[] = { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = cmp(float2(0,0) != cb0[64].wx);
  r0.z = -0.00999999978 + v1.w;
  r0.z = cmp(r0.z < 0);
  r0.x = r0.x ? r0.z : 0;
  r0.xyz = cb1[5].xyz + -v5.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r1.xy = cmp(float2(0,0.5) < cb0[83].ww);
  r1.zw = cmp(float2(0,0) != v6.yx);
  r2.xyz = r1.zzz ? cb0[84].xyz : cb0[83].xyz;
  r2.xyz = r1.xxx ? r2.xyz : cb0[79].xyz;
  r0.xyz = r0.xyz * r0.www + r2.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = -1 + cb0[64].z;
  r2.xyzw = t0.SampleBias(s0_s, v2.xy, r0.w).xyzw;
  r3.xyz = cmp(cb0[26].xxx == float3(3,1,2));
  r1.x = cb0[38].z * r2.w;
  r4.xyz = cb0[39].xyz + -r2.xyz;
  r4.xyz = r1.xxx * r4.xyz + r2.xyz;
  r2.xyz = r3.xxx ? r4.xyz : r2.xyz;
  r1.x = -cb0[26].y + r2.w;
  r1.x = cmp(r1.x < 0);
  r1.x = r3.y ? r1.x : 0;
  if (r1.x != 0) discard;
  r4.xyzw = t1.SampleBias(s1_s, v2.xy, r0.w).xyzw;
  r1.xz = cmp(float2(0,0) != cb0[33].xy);
  r0.w = r1.x ? r4.y : 0.5;
  r1.x = cmp(0 != cb0[48].x);
  r5.xyzw = cmp(r4.wwww >= float4(0.800000012,0.400000006,0.200000003,0.600000024));
  r1.x = r1.x ? r5.x : 0;
  r1.x = r1.x ? 2 : 1;
  r3.x = cmp(0 != cb0[51].w);
  r3.x = r5.y ? r3.x : 0;
  r6.xyz = cmp(r4.www < float3(0.600000024,0.400000006,0.800000012));
  r3.x = r3.x ? r6.x : 0;
  r1.x = r3.x ? 3 : r1.x;
  r3.x = cmp(0 != cb0[55].w);
  r3.x = r5.z ? r3.x : 0;
  r3.x = r6.y ? r3.x : 0;
  r1.x = r3.x ? 4 : r1.x;
  r3.x = cmp(0 != cb0[59].w);
  r3.x = r5.w ? r3.x : 0;
  r3.x = r6.z ? r3.x : 0;
  r1.x = r3.x ? 5 : r1.x;
  r5.xyzw = cmp(r1.xxxx == float4(2,3,4,5));
  r3.xyw = r5.xxx ? cb0[48].yzw : cb0[23].xyz;
  r3.xyw = r5.yyy ? cb0[52].xyz : r3.xyw;
  r3.xyw = r5.zzz ? cb0[56].xyz : r3.xyw;
  r3.xyw = r5.www ? cb0[60].xyz : r3.xyw;
  r2.xyz = r3.xyw * r2.xyz;
  r3.x = cmp(0.00999999978 < r2.w);
  r3.x = r3.x ? r3.z : 0;
  r2.w = r3.x ? r2.w : 0;
  r3.y = v1.x * r0.w;
  r0.w = r1.z ? r3.y : r0.w;
  r1.z = cmp(r0.w < 0.0500000007);
  r3.y = cmp(0.949999988 < r0.w);
  r0.w = v3.w + r0.w;
  r0.w = 0.5 * r0.w;
  r0.w = r3.y ? 1 : r0.w;
  r0.w = r1.z ? 0 : r0.w;
  r1.z = cmp(r0.w < cb0[33].z);
  r0.w = cb0[33].z + -r0.w;
  r0.w = r0.w / cb0[33].z;
  r3.y = cmp(0 != cb0[36].y);
  r3.z = v1.y + v1.y;
  r3.z = max(0.00999999978, r3.z);
  r3.z = cb0[36].x * r3.z;
  r3.y = r3.y ? r3.z : cb0[36].x;
  r0.w = r0.w / r3.y;
  r0.w = min(1, r0.w);
  r0.w = 1 + -r0.w;
  r6.y = r1.z ? r0.w : 1;
  r6.x = r1.z ? 1.000000 : 0;
  r6.xy = r1.ww ? float2(1,0) : r6.xy;
  r0.w = -1 + r1.x;
  r1.z = r0.w * 0.100000001 + 0.0500000007;
  r1.w = cmp(0 != cb0[34].w);
  if (r1.w != 0) {
    r0.w = r0.w * 0.100000001 + 0.550000012;
    r6.z = 1 + -r1.z;
    r6.w = 1 + -r0.w;
    r3.yzw = t2.Sample(s2_s, r6.yz).xyz;
    r7.xyz = t2.Sample(s2_s, r6.yw).xyz;
    r3.yzw = -r7.xyz + r3.yzw;
    r3.yzw = cb0[76].zzz * r3.yzw + r7.xyz;
    r7.xz = float2(0,0);
    r7.yw = r6.zw;
    r8.xyz = t2.Sample(s2_s, r7.xy).xyz;
    r7.xyz = t2.Sample(s2_s, r7.zw).xyz;
    r8.xyz = r8.xyz + -r7.xyz;
    r7.xyz = cb0[76].zzz * r8.xyz + r7.xyz;
  } else {
    r8.x = 1 + -r1.z;
    r8.y = r6.y;
    r3.yzw = t2.Sample(s2_s, r8.yx).xyz;
    r8.z = 0;
    r7.xyz = t2.Sample(s2_s, r8.zx).xyz;
  }
  r0.w = cmp(r1.x == 1.000000);
  r1.x = r5.z ? cb0[58].w : cb0[62].w;
  r1.z = r5.z ? cb0[59].x : cb0[63].x;
  r1.x = r5.y ? cb0[54].w : r1.x;
  r1.z = r5.y ? cb0[55].x : r1.z;
  r8.x = r5.x ? cb0[50].w : r1.x;
  r8.y = r5.x ? cb0[51].x : r1.z;
  r1.xz = r0.ww ? cb0[38].xy : r8.xy;
  r0.x = dot(v3.xyz, r0.xyz);
  r0.x = max(0.00100000005, r0.x);
  r0.x = log2(r0.x);
  r0.x = r1.x * r0.x;
  r0.x = exp2(r0.x);
  r0.y = 1 + -r4.z;
  r0.x = cmp(r0.y < r0.x);
  r1.xzw = cb0[37].yzw * r1.zzz;
  r1.xzw = r1.xzw * r4.xxx;
  r0.xyz = r0.xxx ? r1.xzw : 0;
  r1.xzw = cb0[43].xyz * r2.xyz;
  r1.xzw = cb0[42].zzz * r1.xzw;
  r4.xyz = cb0[42].www * r1.xzw;
  r6.yzw = cb0[49].xxx * r1.xzw;
  r8.xyz = cb0[52].www * r1.xzw;
  r9.xyz = cb0[56].www * r1.xzw;
  r10.xyz = cb0[60].www * r1.xzw;
  r1.xzw = r5.www ? r10.xyz : r1.xzw;
  r1.xzw = r5.zzz ? r9.xyz : r1.xzw;
  r1.xzw = r5.yyy ? r8.xyz : r1.xzw;
  r1.xzw = r5.xxx ? r6.yzw : r1.xzw;
  r1.xzw = r0.www ? r4.xyz : r1.xzw;
  r3.yzw = r3.yzw * r2.xyz;
  r0.w = cmp(r6.x == 1.000000);
  r3.yzw = r0.www ? r3.yzw : r2.xyz;
  r3.yzw = r3.yzw + r0.xyz;
  r4.xy = v2.xy * cb0[87].xy + cb0[87].zw;
  r4.xy = cb1[0].yy * cb0[88].xy + r4.xy;
  r0.w = t0.Sample(s0_s, v2.xy).w;
  r4.x = t3.Sample(s3_s, r4.xy).x;
  r4.x = cb0[88].z * r4.x;
  r4.xyz = cb0[89].xyz * r4.xxx;
  r1.xzw = r0.www * r4.xyz + r1.xzw;
  r4.xyz = r1.xzw + -r3.yzw;
  r4.xyz = r2.www * r4.xyz + r3.yzw;
  r3.yzw = r3.xxx ? r4.xyz : r3.yzw;
  r4.xyz = cb1[5].xyz + -v8.xyz;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = r4.xyz * r0.www;
  r0.w = dot(v3.xyz, v3.xyz);
  r0.w = rsqrt(r0.w);
  r5.yzw = v3.xyz * r0.www;
  r0.w = saturate(dot(r4.xyz, r5.yzw));
  r0.w = 1 + -r0.w;
  r0.w = max(9.99999975e-05, r0.w);
  r0.w = log2(r0.w);
  r0.w = cb0[92].x * r0.w;
  r0.w = exp2(r0.w);
  r4.xyz = max(cb0[91].xyz, cb0[90].xyz);
  r4.xyz = r4.xyz * r0.www;
  r6.xyz = r4.xyz * cb0[92].yyy + r3.yzw;
  r0.w = 1 + -r2.w;
  r0.w = cb0[92].z * r0.w + r2.w;
  r0.xyz = r7.xyz * r2.xyz + r0.xyz;
  r1.xzw = r1.xzw + -r0.xyz;
  r1.xzw = r2.www * r1.xzw + r0.xyz;
  r0.xyz = r3.xxx ? r1.xzw : r0.xyz;
  r0.xyz = r4.xyz * cb0[92].yyy + r0.xyz;
  r1.x = max(r6.y, r6.z);
  r2.w = max(r6.x, r1.x);
  r1.x = cmp(1 < r2.w);
  r2.xyz = r6.xyz / r2.www;
  r6.w = 1;
  r2.xyzw = r1.xxxx ? r2.xyzw : r6.xyzw;
  r1.xzw = -r2.xyz + r0.xyz;
  r1.xzw = cb0[85].xxx * r1.xzw + r2.xyz;
  r0.xyz = r1.yyy ? r1.xzw : r0.xyz;
  r1.x = saturate(0.0500000007 * r2.w);
  o1.w = sqrt(r1.x);
  o0.xyz = v3.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  r1.x = cmp(0 != cb0[22].x);
  r1.y = 0.00392156886 * cb0[22].y;
  o2.z = r1.x ? r1.y : r0.z;
  o0.w = r5.x ? 0.333000 : 0;
  o1.xyz = r2.xyz;
  o2.xyw = r0.xyw;
  o3.x = 0.0156862754;
  o4.x = r0.w;
  o5.x = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Wed Sep 27 23:59:44 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// COLOR                    0   xyzw        1     NONE   float   xy w
// TEXCOORD                 0   xyzw        2     NONE   float   xy
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
// TEXCOORD                 2   xyzw        4     NONE   float   xy w
// TEXCOORD                 3   xyz         5     NONE   float   xyz
// TEXCOORD                 4   xy          6     NONE   float   xy
// TEXCOORD                 5   xyz         7     NONE   float
// TEXCOORD                 6   xyzw        8     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   x           3   TARGET   float   x
// SV_Target                4   x           4   TARGET   float   x
// SV_Target                5   x           5   TARGET   float   x
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer CB0[93], immediateIndexed
dcl_constantbuffer CB1[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyw
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xy
dcl_input_ps linear v8.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.x
dcl_output o4.x
dcl_output o5.x
dcl_temps 11
ne r0.xy, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[64].wxww
add r0.z, v1.w, l(-0.010000)
lt r0.z, r0.z, l(0.000000)
and r0.x, r0.x, r0.z
discard_nz r0.x
if_nz r0.y
  lt r0.x, cb0[64].y, l(0.950000)
  if_nz r0.x
    div r0.xy, v4.yxyy, v4.wwww
    mul r0.xy, r0.xyxx, cb1[7].yxyy
    mul r0.xy, r0.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000)
    ge r0.zw, r0.xxxy, -r0.xxxy
    frc r0.xy, |r0.xyxx|
    movc r0.xy, r0.zwzz, r0.xyxx, -r0.xyxx
    mul r0.xy, r0.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000)
    ftou r0.xy, r0.xyxx
    dp4 r1.x, cb0[8].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.y, cb0[9].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.z, cb0[10].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.w, cb0[11].xyzw, icb[r0.y + 0].xyzw
    dp4 r0.x, r1.xyzw, icb[r0.x + 0].xyzw
    mad r0.x, cb0[64].y, l(17.000000), -r0.x
    add r0.x, r0.x, l(-0.010000)
    lt r0.x, r0.x, l(0.000000)
    discard_nz r0.x
  endif
endif
add r0.xyz, -v5.xyzx, cb1[5].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
lt r1.xy, l(0.000000, 0.500000, 0.000000, 0.000000), cb0[83].wwww
ne r1.zw, l(0.000000, 0.000000, 0.000000, 0.000000), v6.yyyx
movc r2.xyz, r1.zzzz, cb0[84].xyzx, cb0[83].xyzx
movc r2.xyz, r1.xxxx, r2.xyzx, cb0[79].xyzx
mad r0.xyz, r0.xyzx, r0.wwww, r2.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
add r0.w, cb0[64].z, l(-1.000000)
sample_b_indexable(texture2d)(float,float,float,float) r2.xyzw, v2.xyxx, t0.xyzw, s0, r0.w
eq r3.xyz, cb0[26].xxxx, l(3.000000, 1.000000, 2.000000, 0.000000)
mul r1.x, r2.w, cb0[38].z
add r4.xyz, -r2.xyzx, cb0[39].xyzx
mad r4.xyz, r1.xxxx, r4.xyzx, r2.xyzx
movc r2.xyz, r3.xxxx, r4.xyzx, r2.xyzx
add r1.x, r2.w, -cb0[26].y
lt r1.x, r1.x, l(0.000000)
and r1.x, r3.y, r1.x
discard_nz r1.x
sample_b_indexable(texture2d)(float,float,float,float) r4.xyzw, v2.xyxx, t1.xyzw, s1, r0.w
ne r1.xz, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[33].xxyx
movc r0.w, r1.x, r4.y, l(0.500000)
ne r1.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[48].x
ge r5.xyzw, r4.wwww, l(0.800000, 0.400000, 0.200000, 0.600000)
and r1.x, r1.x, r5.x
movc r1.x, r1.x, l(2.000000), l(1.000000)
ne r3.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[51].w
and r3.x, r5.y, r3.x
lt r6.xyz, r4.wwww, l(0.600000, 0.400000, 0.800000, 0.000000)
and r3.x, r3.x, r6.x
movc r1.x, r3.x, l(3.000000), r1.x
ne r3.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[55].w
and r3.x, r5.z, r3.x
and r3.x, r6.y, r3.x
movc r1.x, r3.x, l(4.000000), r1.x
ne r3.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[59].w
and r3.x, r5.w, r3.x
and r3.x, r6.z, r3.x
movc r1.x, r3.x, l(5.000000), r1.x
eq r5.xyzw, r1.xxxx, l(2.000000, 3.000000, 4.000000, 5.000000)
movc r3.xyw, r5.xxxx, cb0[48].yzyw, cb0[23].xyxz
movc r3.xyw, r5.yyyy, cb0[52].xyxz, r3.xyxw
movc r3.xyw, r5.zzzz, cb0[56].xyxz, r3.xyxw
movc r3.xyw, r5.wwww, cb0[60].xyxz, r3.xyxw
mul r2.xyz, r2.xyzx, r3.xywx
lt r3.x, l(0.010000), r2.w
and r3.x, r3.x, r3.z
and r2.w, r2.w, r3.x
mul r3.y, r0.w, v1.x
movc r0.w, r1.z, r3.y, r0.w
lt r1.z, r0.w, l(0.050000)
lt r3.y, l(0.950000), r0.w
add r0.w, r0.w, v3.w
mul r0.w, r0.w, l(0.500000)
movc r0.w, r3.y, l(1.000000), r0.w
movc r0.w, r1.z, l(0), r0.w
lt r1.z, r0.w, cb0[33].z
add r0.w, -r0.w, cb0[33].z
div r0.w, r0.w, cb0[33].z
ne r3.y, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[36].y
add r3.z, v1.y, v1.y
max r3.z, r3.z, l(0.010000)
mul r3.z, r3.z, cb0[36].x
movc r3.y, r3.y, r3.z, cb0[36].x
div r0.w, r0.w, r3.y
min r0.w, r0.w, l(1.000000)
add r0.w, -r0.w, l(1.000000)
movc r6.y, r1.z, r0.w, l(1.000000)
and r6.x, r1.z, l(0x3f800000)
movc r6.xy, r1.wwww, l(1.000000,0,0,0), r6.xyxx
add r0.w, r1.x, l(-1.000000)
mad r1.z, r0.w, l(0.100000), l(0.050000)
ne r1.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[34].w
if_nz r1.w
  mad r0.w, r0.w, l(0.100000), l(0.550000)
  add r6.z, -r1.z, l(1.000000)
  add r6.w, -r0.w, l(1.000000)
  sample_indexable(texture2d)(float,float,float,float) r3.yzw, r6.yzyy, t2.wxyz, s2
  sample_indexable(texture2d)(float,float,float,float) r7.xyz, r6.ywyy, t2.xyzw, s2
  add r3.yzw, r3.yyzw, -r7.xxyz
  mad r3.yzw, cb0[76].zzzz, r3.yyzw, r7.xxyz
  mov r7.xz, l(0,0,0,0)
  mov r7.yw, r6.zzzw
  sample_indexable(texture2d)(float,float,float,float) r8.xyz, r7.xyxx, t2.xyzw, s2
  sample_indexable(texture2d)(float,float,float,float) r7.xyz, r7.zwzz, t2.xyzw, s2
  add r8.xyz, -r7.xyzx, r8.xyzx
  mad r7.xyz, cb0[76].zzzz, r8.xyzx, r7.xyzx
else
  add r8.x, -r1.z, l(1.000000)
  mov r8.y, r6.y
  sample_indexable(texture2d)(float,float,float,float) r3.yzw, r8.yxyy, t2.wxyz, s2
  mov r8.z, l(0)
  sample_indexable(texture2d)(float,float,float,float) r7.xyz, r8.zxzz, t2.xyzw, s2
endif
eq r0.w, r1.x, l(1.000000)
movc r1.x, r5.z, cb0[58].w, cb0[62].w
movc r1.z, r5.z, cb0[59].x, cb0[63].x
movc r1.x, r5.y, cb0[54].w, r1.x
movc r1.z, r5.y, cb0[55].x, r1.z
movc r8.x, r5.x, cb0[50].w, r1.x
movc r8.y, r5.x, cb0[51].x, r1.z
movc r1.xz, r0.wwww, cb0[38].xxyx, r8.xxyx
dp3 r0.x, v3.xyzx, r0.xyzx
max r0.x, r0.x, l(0.001000)
log r0.x, r0.x
mul r0.x, r0.x, r1.x
exp r0.x, r0.x
add r0.y, -r4.z, l(1.000000)
lt r0.x, r0.y, r0.x
mul r1.xzw, r1.zzzz, cb0[37].yyzw
mul r1.xzw, r4.xxxx, r1.xxzw
and r0.xyz, r0.xxxx, r1.xzwx
mul r1.xzw, r2.xxyz, cb0[43].xxyz
mul r1.xzw, r1.xxzw, cb0[42].zzzz
mul r4.xyz, r1.xzwx, cb0[42].wwww
mul r6.yzw, r1.xxzw, cb0[49].xxxx
mul r8.xyz, r1.xzwx, cb0[52].wwww
mul r9.xyz, r1.xzwx, cb0[56].wwww
mul r10.xyz, r1.xzwx, cb0[60].wwww
movc r1.xzw, r5.wwww, r10.xxyz, r1.xxzw
movc r1.xzw, r5.zzzz, r9.xxyz, r1.xxzw
movc r1.xzw, r5.yyyy, r8.xxyz, r1.xxzw
movc r1.xzw, r5.xxxx, r6.yyzw, r1.xxzw
movc r1.xzw, r0.wwww, r4.xxyz, r1.xxzw
mul r3.yzw, r2.xxyz, r3.yyzw
eq r0.w, r6.x, l(1.000000)
movc r3.yzw, r0.wwww, r3.yyzw, r2.xxyz
add r3.yzw, r0.xxyz, r3.yyzw
mad r4.xy, v2.xyxx, cb0[87].xyxx, cb0[87].zwzz
mad r4.xy, cb1[0].yyyy, cb0[88].xyxx, r4.xyxx
sample_indexable(texture2d)(float,float,float,float) r0.w, v2.xyxx, t0.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r4.x, r4.xyxx, t3.xyzw, s3
mul r4.x, r4.x, cb0[88].z
mul r4.xyz, r4.xxxx, cb0[89].xyzx
mad r1.xzw, r0.wwww, r4.xxyz, r1.xxzw
add r4.xyz, -r3.yzwy, r1.xzwx
mad r4.xyz, r2.wwww, r4.xyzx, r3.yzwy
movc r3.yzw, r3.xxxx, r4.xxyz, r3.yyzw
add r4.xyz, -v8.xyzx, cb1[5].xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r4.xyzx
dp3 r0.w, v3.xyzx, v3.xyzx
rsq r0.w, r0.w
mul r5.yzw, r0.wwww, v3.xxyz
dp3_sat r0.w, r4.xyzx, r5.yzwy
add r0.w, -r0.w, l(1.000000)
max r0.w, r0.w, l(0.000100)
log r0.w, r0.w
mul r0.w, r0.w, cb0[92].x
exp r0.w, r0.w
max r4.xyz, cb0[90].xyzx, cb0[91].xyzx
mul r4.xyz, r0.wwww, r4.xyzx
mad r6.xyz, r4.xyzx, cb0[92].yyyy, r3.yzwy
add r0.w, -r2.w, l(1.000000)
mad r0.w, cb0[92].z, r0.w, r2.w
mad r0.xyz, r7.xyzx, r2.xyzx, r0.xyzx
add r1.xzw, -r0.xxyz, r1.xxzw
mad r1.xzw, r2.wwww, r1.xxzw, r0.xxyz
movc r0.xyz, r3.xxxx, r1.xzwx, r0.xyzx
mad r0.xyz, r4.xyzx, cb0[92].yyyy, r0.xyzx
max r1.x, r6.z, r6.y
max r2.w, r1.x, r6.x
lt r1.x, l(1.000000), r2.w
div r2.xyz, r6.xyzx, r2.wwww
mov r6.w, l(1.000000)
movc r2.xyzw, r1.xxxx, r2.xyzw, r6.xyzw
add r1.xzw, r0.xxyz, -r2.xxyz
mad r1.xzw, cb0[85].xxxx, r1.xxzw, r2.xxyz
movc r0.xyz, r1.yyyy, r1.xzwx, r0.xyzx
mul_sat r1.x, r2.w, l(0.050000)
sqrt o1.w, r1.x
mad o0.xyz, v3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
ne r1.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[22].x
mul r1.y, cb0[22].y, l(0.00392156886)
movc o2.z, r1.x, r1.y, r0.z
and o0.w, r5.x, l(0x3eaa7efa)
mov o1.xyz, r2.xyzx
mov o2.xyw, r0.xyxw
mov o3.x, l(0.0156862754)
mov o4.x, r0.w
mov o5.x, l(0)
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
